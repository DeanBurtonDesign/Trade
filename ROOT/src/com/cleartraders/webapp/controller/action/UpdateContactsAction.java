/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webapp.controller.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.cleartraders.common.db.DataCache;
import com.cleartraders.common.entity.UserBean;
import com.cleartraders.common.exception.EmailDuplicatedException;
import com.cleartraders.common.util.log.DebugLevel;
import com.cleartraders.common.util.log.LogTools;
import com.cleartraders.common.util.tools.CommonTools;
import com.cleartraders.webapp.WebConstants;
import com.cleartraders.webapp.controller.form.ContactsForm;
import com.cleartraders.webapp.model.myaccount.AccountController;

/** 
 * MyEclipse Struts
 * Creation date: 09-23-2008
 * 
 * XDoclet definition:
 * @struts.action path="/myaccount/contacts" name="ContactsForm" scope="request" validate="true"
 * @struts.action-forward name="failed" path="/myaccount/contacts.jsp"
 * @struts.action-forward name="sessionended" path="/login/userLogin.jsp"
 * @struts.action-forward name="successful" path="/myaccount/contacts.jsp"
 */
public class UpdateContactsAction extends BaseAction
{
    /*
     * Generated Methods
     */

    /** 
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward executeAction(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
    {
        String forwardName=WebConstants.FORWARD_FAILED;
        
        try
        {
            ContactsForm ContactsForm = (ContactsForm) form;// TODO Auto-generated method stub
            
            HttpSession session = request.getSession();
            
            //Base action already handle logout or timeout issue, so, here we don't need check
            UserBean oCurrentUserInfo = (UserBean)session.getAttribute(WebConstants.USER_KEY);
            
            UserBean oNewUserInfo = new UserBean(oCurrentUserInfo);
            oNewUserInfo.setFirst_name(ContactsForm.getFirst_name());
            oNewUserInfo.setLast_name(ContactsForm.getLast_name());
            oNewUserInfo.setEmail(ContactsForm.getEmail());
            oNewUserInfo.setMobile(ContactsForm.getMobile());
            //System.out.println("Country ID is "+ContactsForm.getCountry()+" of User "+oCurrentUserInfo.getLogin_name());
            oNewUserInfo.setCountry_id(Long.parseLong(ContactsForm.getCountry()));
            oNewUserInfo.setSuburb_city("0");
            oNewUserInfo.setTime_zone_id(Long.parseLong(ContactsForm.getTime_zone()));
            
            LogTools.getInstance().insertLog(DebugLevel.INFO,"Update user contacts request from User:"+oCurrentUserInfo.getLogin_name()+", IP:"+request.getRemoteAddr());
            
            ActionMessages errors = checkFormField(oNewUserInfo);
            saveErrors(request, errors);
            
            if(!errors.isEmpty())
            {
                return mapping.findForward(forwardName);
            }
            
            errors = checkPassword(ContactsForm.getPassword(), ContactsForm.getConfirmpassword());
            saveErrors(request, errors);
            
            if(!errors.isEmpty())
            {
                return mapping.findForward(forwardName);
            }
            
            new AccountController().checkEmail(oNewUserInfo, oCurrentUserInfo.getEmail(), ContactsForm.getEmail());
                        
            if(new AccountController().updateUserContacts(oNewUserInfo))
            {
                LogTools.getInstance().insertLog(DebugLevel.INFO,"Success to update user contacts request from User:"+oCurrentUserInfo.getLogin_name()+", IP:"+request.getRemoteAddr());
                forwardName = WebConstants.FORWARD_SUCCESS;
                
                oCurrentUserInfo.setFirst_name(ContactsForm.getFirst_name());
                oCurrentUserInfo.setLast_name(ContactsForm.getLast_name());
                oCurrentUserInfo.setEmail(ContactsForm.getEmail());
                oCurrentUserInfo.setMobile(ContactsForm.getMobile());
                oCurrentUserInfo.setCountry_id(Long.parseLong(ContactsForm.getCountry()));
                oCurrentUserInfo.setSuburb_city("0");
                
                //update password if user filled
                if(ContactsForm.getPassword() != null && ContactsForm.getPassword().length() > 0)
                {
                    if(!new AccountController().changeUserPWD(oCurrentUserInfo.getId(),ContactsForm.getPassword()))
                    {
                        forwardName = WebConstants.FORWARD_FAILED;
                    }
                }
            }
            else
            {
                LogTools.getInstance().insertLog(DebugLevel.ERROR,"Failed to update user contacts request from User:"+oCurrentUserInfo.getLogin_name()+", IP:"+request.getRemoteAddr());
            }
        }
        catch(EmailDuplicatedException emailExp)
        {
            emailExp.printStackTrace();
            
            ActionMessages errors = new ActionMessages();
            errors.add("email", new ActionMessage("signup.email.duplicated.error"));            
            saveErrors(request, errors);          
        }
        catch(Exception e)
        {
            e.printStackTrace();
            
            LogTools.getInstance().insertLog(DebugLevel.ERROR,CommonTools.getExceptionDescribe(e));
        }
        finally
        {
            request.setAttribute(WebConstants.ALL_COUNTRY_DATA, DataCache.getInstance().getAllCountry());
            
            //get all trading time zone
            HttpSession session = request.getSession();
            UserBean oUserBean = (UserBean)session.getAttribute(WebConstants.USER_KEY);
            
            request.setAttribute(WebConstants.USER_TRADING_TIME_ZONE, (new AccountController()).getUserTimeZone(oUserBean));
            request.setAttribute(WebConstants.ALL_TIME_ZONE, DataCache.getInstance().getAllTimeZone());
        }
                
        //return mapping.findForward(forwardName);
        
        //use Ajax to submit, so just return null. by Peter
        return null;
    }
    
    private ActionMessages checkPassword(String newPassword, String confirmNewPassword)
    {
        ActionMessages errors = new ActionMessages();  
        
        if(null != newPassword)
        {
            if(newPassword.length() > 100)
            {
                errors.add("password", new ActionMessage("changepwd.password.too.long.error"));
            }            
            else if(!newPassword.equals(confirmNewPassword))
            {
                errors.add("password", new ActionMessage("changepwd.password.not.consistent.error"));
            }
        }
        else if(null != confirmNewPassword)
        {
            if(confirmNewPassword.length() > 100)
            {
                errors.add("confirmpassword", new ActionMessage("changepwd.password.too.long.error"));
            }
            else if(!confirmNewPassword.equals(newPassword))
            {
                errors.add("password", new ActionMessage("changepwd.password.not.consistent.error"));
            }
        }
        
        return errors;
    }
        
    private ActionMessages checkFormField(UserBean oNewUserInfo)
    {
        ActionMessages errors = new ActionMessages();       
        
        if(null == oNewUserInfo.getFirst_name() || "".equals(oNewUserInfo.getFirst_name()))
        {
            errors.add("first_name", new ActionMessage("signup.no.firstname.error"));
        }
        else if(oNewUserInfo.getFirst_name().length() > 100)
        {
            errors.add("first_name", new ActionMessage("signup.firstname.too.long.error"));
        }
        
        if(null == oNewUserInfo.getLast_name() || "".equals(oNewUserInfo.getLast_name()))
        {
            errors.add("last_name", new ActionMessage("signup.no.secondname.error"));
        }
        else if(oNewUserInfo.getLast_name().length() > 100)
        {
            errors.add("last_name", new ActionMessage("signup.secondname.too.long.error"));
        }
        
        if(null == oNewUserInfo.getEmail() || "".equals(oNewUserInfo.getEmail()))
        {
            errors.add("email", new ActionMessage("signup.no.email.error"));
        }
        else if(oNewUserInfo.getEmail().length() > 100)
        {
            errors.add("email", new ActionMessage("signup.email.too.long.error"));
        }
        
        if(null == oNewUserInfo.getMobile() || "".equals(oNewUserInfo.getMobile()))
        {
            errors.add("mobile", new ActionMessage("signup.no.mobile.number.error"));
        }
        else if(null != oNewUserInfo.getMobile() && oNewUserInfo.getMobile().length() > 100)
        {
            errors.add("mobile", new ActionMessage("signup.mobile.number.too.long.error"));
        }
                
        return errors;
    }
}
