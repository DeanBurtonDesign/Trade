/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webapp.controller.action;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.cleartraders.common.db.DataCache;
import com.cleartraders.common.define.CommonDefine;
import com.cleartraders.common.entity.QuickLinkBean;
import com.cleartraders.common.entity.QuickLinkComparator;
import com.cleartraders.common.entity.UserBean;
import com.cleartraders.common.util.log.DebugLevel;
import com.cleartraders.common.util.log.LogTools;
import com.cleartraders.common.util.tools.CommonTools;
import com.cleartraders.webapp.WebConstants;
import com.cleartraders.webapp.controller.form.UpdateTradingPreperenceForm;
import com.cleartraders.webapp.model.bean.SignalNotificationBean;
import com.cleartraders.webapp.model.bean.UserBrokerInfo;
import com.cleartraders.webapp.model.myaccount.AccountController;

/** 
 * MyEclipse Struts
 * Creation date: 09-27-2008
 * 
 * XDoclet definition:
 * @struts.action path="/myaccount/updateTradingPreference" name="updateTradingPreferenceForm" scope="request" validate="true"
 * @struts.action-forward name="failed" path="/login/userLogin.jsp"
 * @struts.action-forward name="sessionended" path="/login/userLogin.jsp"
 * @struts.action-forward name="successful" path="/myaccount/preferences.jsp"
 */
public class UpdateTradingPreference extends BaseAction
{
    /*
     * Generated Methods
     */

    /** 
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward executeAction(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
    {
        try
        {
            HttpSession session = request.getSession();
            
            //Base action already handle logout or timeout issue, so, here we don't need check
            UserBean oUserBean = (UserBean)session.getAttribute(WebConstants.USER_KEY);
            
            LogTools.getInstance().insertLog(DebugLevel.INFO,"Update trading preference request from User:"+oUserBean.getLogin_name()+", IP:"+request.getRemoteAddr());
                        
            UpdateTradingPreperenceForm updateTradingPreferenceForm = (UpdateTradingPreperenceForm) form;
            
            //collect user's quick link
            List<QuickLinkBean> oQuickLinks = new ArrayList<QuickLinkBean>();
            if(updateTradingPreferenceForm.getNews_name_1() != null && updateTradingPreferenceForm.getNews_url_1() != null)
            {
                if( updateTradingPreferenceForm.getNews_name_1().length() > 0 || updateTradingPreferenceForm.getNews_url_1().length() > 0 )
                {
                    QuickLinkBean oNewQuickLink = new QuickLinkBean();
                    oNewQuickLink.setType(WebConstants.NEWS_QUICK_LINK);
                    oNewQuickLink.setIndex(1);
                    oNewQuickLink.setName(updateTradingPreferenceForm.getNews_name_1());
                    
                    if(updateTradingPreferenceForm.getNews_url_1().toLowerCase().indexOf("http://") != -1 ||
                       updateTradingPreferenceForm.getNews_url_1().toLowerCase().indexOf("http:\\") != -1 ||
                       updateTradingPreferenceForm.getNews_url_1().toLowerCase().indexOf("https://") != -1 ||
                       updateTradingPreferenceForm.getNews_url_1().toLowerCase().indexOf("https:\\") != -1)
                    {
                        oNewQuickLink.setUrl(updateTradingPreferenceForm.getNews_url_1());
                    }
                    else
                    {
                        oNewQuickLink.setUrl("http://"+updateTradingPreferenceForm.getNews_url_1());
                    }
                    
                    oQuickLinks.add(oNewQuickLink);
                }
            }
            
            if(updateTradingPreferenceForm.getNews_name_2() != null && updateTradingPreferenceForm.getNews_url_2() != null)
            {
                if( updateTradingPreferenceForm.getNews_name_2().length() > 0 || updateTradingPreferenceForm.getNews_url_2().length() > 0 )
                {
                    QuickLinkBean oNewQuickLink = new QuickLinkBean();
                    oNewQuickLink.setType(WebConstants.NEWS_QUICK_LINK);
                    oNewQuickLink.setIndex(2);
                    oNewQuickLink.setName(updateTradingPreferenceForm.getNews_name_2());
                    
                    if(updateTradingPreferenceForm.getNews_url_2().toLowerCase().indexOf("http://") != -1 ||
                        updateTradingPreferenceForm.getNews_url_2().toLowerCase().indexOf("http:\\") != -1 ||
                        updateTradingPreferenceForm.getNews_url_2().toLowerCase().indexOf("https://") != -1 ||
                        updateTradingPreferenceForm.getNews_url_2().toLowerCase().indexOf("https:\\") != -1)
                     {
                        oNewQuickLink.setUrl(updateTradingPreferenceForm.getNews_url_2());
                     }
                     else
                     {
                         oNewQuickLink.setUrl("http://"+updateTradingPreferenceForm.getNews_url_2());
                     }
                    
                    oQuickLinks.add(oNewQuickLink);
                }
            }
            
            if(updateTradingPreferenceForm.getNews_name_3() != null && updateTradingPreferenceForm.getNews_url_3() != null)
            {
                if( updateTradingPreferenceForm.getNews_name_3().length() > 0 || updateTradingPreferenceForm.getNews_url_3().length() > 0 )
                {
                    QuickLinkBean oNewQuickLink = new QuickLinkBean();
                    oNewQuickLink.setType(WebConstants.NEWS_QUICK_LINK);
                    oNewQuickLink.setIndex(3);
                    oNewQuickLink.setName(updateTradingPreferenceForm.getNews_name_3());
                    if(updateTradingPreferenceForm.getNews_url_3().toLowerCase().indexOf("http://") != -1 ||
                        updateTradingPreferenceForm.getNews_url_3().toLowerCase().indexOf("http:\\") != -1 ||
                        updateTradingPreferenceForm.getNews_url_3().toLowerCase().indexOf("https://") != -1 ||
                        updateTradingPreferenceForm.getNews_url_3().toLowerCase().indexOf("https:\\") != -1)
                     {
                        oNewQuickLink.setUrl(updateTradingPreferenceForm.getNews_url_3());
                     }
                     else
                     {
                         oNewQuickLink.setUrl("http://"+updateTradingPreferenceForm.getNews_url_3());
                     }
                    
                    oQuickLinks.add(oNewQuickLink);
                }
            }
            
            if(updateTradingPreferenceForm.getBroker_name_1() != null && updateTradingPreferenceForm.getBroker_url_1() != null)
            {
                if( updateTradingPreferenceForm.getBroker_name_1().length() > 0 || updateTradingPreferenceForm.getBroker_url_1().length() > 0 )
                {
                    QuickLinkBean oNewQuickLink = new QuickLinkBean();
                    oNewQuickLink.setType(WebConstants.BROKER_QUICK_LINK);
                    oNewQuickLink.setIndex(1);
                    oNewQuickLink.setName(updateTradingPreferenceForm.getBroker_name_1());
                    oNewQuickLink.setUrl(updateTradingPreferenceForm.getBroker_url_1());
                    
                    if(updateTradingPreferenceForm.getBroker_url_1().toLowerCase().indexOf("http://") != -1 ||
                        updateTradingPreferenceForm.getBroker_url_1().toLowerCase().indexOf("http:\\") != -1 ||
                        updateTradingPreferenceForm.getBroker_url_1().toLowerCase().indexOf("https://") != -1 ||
                        updateTradingPreferenceForm.getBroker_url_1().toLowerCase().indexOf("https:\\") != -1)
                     {
                        oNewQuickLink.setUrl(updateTradingPreferenceForm.getBroker_url_1());
                     }
                     else
                     {
                        oNewQuickLink.setUrl("http://"+updateTradingPreferenceForm.getBroker_url_1());
                     }
                    
                    oQuickLinks.add(oNewQuickLink);
                }
            }
            
            if(updateTradingPreferenceForm.getBroker_name_2() != null && updateTradingPreferenceForm.getBroker_url_2() != null)
            {
                if( updateTradingPreferenceForm.getBroker_name_2().length() > 0 || updateTradingPreferenceForm.getBroker_url_2().length() > 0 )
                {
                    QuickLinkBean oNewQuickLink = new QuickLinkBean();
                    oNewQuickLink.setType(WebConstants.BROKER_QUICK_LINK);
                    oNewQuickLink.setIndex(2);
                    oNewQuickLink.setName(updateTradingPreferenceForm.getBroker_name_2());
                    if(updateTradingPreferenceForm.getBroker_url_2().toLowerCase().indexOf("http://") != -1 ||
                        updateTradingPreferenceForm.getBroker_url_2().toLowerCase().indexOf("http:\\") != -1 ||
                        updateTradingPreferenceForm.getBroker_url_2().toLowerCase().indexOf("https://") != -1 ||
                        updateTradingPreferenceForm.getBroker_url_2().toLowerCase().indexOf("https:\\") != -1)
                     {
                        oNewQuickLink.setUrl(updateTradingPreferenceForm.getBroker_url_2());
                     }
                     else
                     {
                        oNewQuickLink.setUrl("http://"+updateTradingPreferenceForm.getBroker_url_2());
                     }
                    
                    oQuickLinks.add(oNewQuickLink);
                }
            }
            
            if(updateTradingPreferenceForm.getBroker_name_3() != null && updateTradingPreferenceForm.getBroker_url_3() != null)
            {
                if( updateTradingPreferenceForm.getBroker_name_3().length() > 0 || updateTradingPreferenceForm.getBroker_url_3().length() > 0 )
                {
                    QuickLinkBean oNewQuickLink = new QuickLinkBean();
                    oNewQuickLink.setType(WebConstants.BROKER_QUICK_LINK);
                    oNewQuickLink.setIndex(3);
                    oNewQuickLink.setName(updateTradingPreferenceForm.getBroker_name_3());
                    if(updateTradingPreferenceForm.getBroker_url_3().toLowerCase().indexOf("http://") != -1 ||
                        updateTradingPreferenceForm.getBroker_url_3().toLowerCase().indexOf("http:\\") != -1 ||
                        updateTradingPreferenceForm.getBroker_url_3().toLowerCase().indexOf("https://") != -1 ||
                        updateTradingPreferenceForm.getBroker_url_3().toLowerCase().indexOf("https:\\") != -1)
                     {
                        oNewQuickLink.setUrl(updateTradingPreferenceForm.getBroker_url_3());                     
                     }
                     else
                     {
                        oNewQuickLink.setUrl("http://"+updateTradingPreferenceForm.getBroker_url_3());
                     }
                    
                    oQuickLinks.add(oNewQuickLink);
                }
            }
            
            //update user's quick link 
            new AccountController().updateUserQuickLinks(oUserBean,oQuickLinks);
                    
            //update signal notificatons
            int useContactInfoFlag = Integer.parseInt(updateTradingPreferenceForm.getUse_conact_info_flag());
            
            if(useContactInfoFlag == WebConstants.ENABLE)
            {
                //get Email and Mobile from users' contact information
                updateTradingPreferenceForm.setEmail_address(oUserBean.getEmail());
                updateTradingPreferenceForm.setMobile_number(oUserBean.getMobile());
            }
            
            new AccountController().updateAllSignalNotification(oUserBean,new SignalNotificationBean(updateTradingPreferenceForm.getEmail_address(),updateTradingPreferenceForm.getMobile_number(),useContactInfoFlag));
            
            //update time zone
            int timeZoneOffSet = Integer.parseInt(updateTradingPreferenceForm.getTime_zone());
            new AccountController().updateUserTimeZoneByOffSet(oUserBean,timeZoneOffSet);
            
            //update broker fee
            double brokerFee = CommonDefine.DEFAULT_BROKER_FEE;
            if(updateTradingPreferenceForm.getBroker_fee() != null)
            {
                brokerFee = Double.parseDouble(updateTradingPreferenceForm.getBroker_fee());
            }
            
            new AccountController().updateUserBrokerFee(oUserBean,brokerFee);
            
            //-----------------------get all return information----------------------------------  
            //get all trading times
            
            //get all time zone
            request.setAttribute(WebConstants.USER_TRADING_TIME_ZONE, (new AccountController()).getUserTimeZone(oUserBean));
            request.setAttribute(WebConstants.ALL_TIME_ZONE, DataCache.getInstance().getAllTimeZone());
            
            //get all signal notifications
            List<SignalNotificationBean> oAllSignalNotification = (new AccountController()).getAllSignalNotification(oUserBean);
            request.setAttribute(WebConstants.USER_SIGNAL_NOTIFICATION, oAllSignalNotification);
                    
            //get all quick links
            List<QuickLinkBean> oNewQuickLinks = (new AccountController()).getAllQuickLinks(oUserBean);
            Comparator<QuickLinkBean> comp = new QuickLinkComparator();
            Collections.sort(oQuickLinks,comp);
            request.setAttribute(WebConstants.USER_QUICK_LINKS, oNewQuickLinks);
            
            //get broker fee
            UserBrokerInfo oUserBrokerInfo =  new AccountController().getUserBrokerFee(oUserBean);
            request.setAttribute(WebConstants.USER_BROKER_INFO, oUserBrokerInfo);        
        }
        catch(Exception e)
        {
            e.printStackTrace();
            
            LogTools.getInstance().insertLog(DebugLevel.ERROR,CommonTools.getExceptionDescribe(e));
        }
        
        return mapping.findForward(WebConstants.FORWARD_SUCCESS);
    }
}
