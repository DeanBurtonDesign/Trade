/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webapp.controller.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.cleartraders.common.define.CommonDefine;
import com.cleartraders.common.entity.ProductBean;
import com.cleartraders.common.entity.UserBean;
import com.cleartraders.common.exception.DataInvalideException;
import com.cleartraders.common.exception.EmailDuplicatedException;
import com.cleartraders.common.exception.MobileDuplicatedException;
import com.cleartraders.common.util.log.DebugLevel;
import com.cleartraders.common.util.log.LogTools;
import com.cleartraders.common.util.tools.CommonTools;
import com.cleartraders.webapp.WebConstants;
import com.cleartraders.webapp.config.WebappResManager;
import com.cleartraders.webapp.controller.form.UserRegisterForm;
import com.cleartraders.webapp.db.DBAccessor;
import com.cleartraders.webapp.model.signup.SignupController;

/** 
 * MyEclipse Struts
 * Creation date: 02-09-2009
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class UserRegisterAction extends Action
{
    /*
     * Generated Methods
     */

    /** 
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
    {
        String forwardName=WebConstants.FORWARD_FAILED;
        
        try
        {
            UserRegisterForm freeTrialRegisterForm = (UserRegisterForm) form;
            HttpSession session = (HttpSession) request.getSession();
            
            //check security code first
            String securitycode = freeTrialRegisterForm.getSecurityCode();
            String sessionSecuritycode = (String) session.getAttribute(WebConstants.SECURITY_CODE);
                           
            if(securitycode.equals(sessionSecuritycode))
            {
                LogTools.getInstance().insertLog(DebugLevel.INFO,"User register request from IP:"+request.getRemoteAddr());
                
                UserBean userBean = new UserBean();
                userBean.setId(0);
                userBean.setConfirm_code(CommonTools.getRandomNumberString(10));
                userBean.setCountry_id(Long.valueOf(freeTrialRegisterForm.getCountryID()));
                userBean.setEmail(freeTrialRegisterForm.getEmail());
                userBean.setEnable(CommonDefine.USER_NOT_ENABLED);
                userBean.setStatus(CommonDefine.UNREGISTERED_USER);
                userBean.setFirst_name(freeTrialRegisterForm.getFirstName());
                userBean.setLast_login(0L);
                userBean.setLast_name(freeTrialRegisterForm.getSecondName());
                userBean.setLocked(CommonDefine.USER_NOT_LOCKED);
                userBean.setLogin_name(freeTrialRegisterForm.getEmail());
                userBean.setMobile(freeTrialRegisterForm.getMobileNumber());        
                userBean.setPwd(freeTrialRegisterForm.getPassword());
                userBean.setReg_date(System.currentTimeMillis());
                userBean.setExpired_date(System.currentTimeMillis());
                userBean.setTime_zone_id(Long.valueOf(freeTrialRegisterForm.getTimeZoneID()));
                userBean.setMemberLevel(WebConstants.FREE_TRIAL_MEMBER_ID);
                userBean.setMemberType(CommonDefine.STANDARD_MEMBER_TYPE);
                userBean.setSms_credits(0);
                 
                ProductBean oProduct = DBAccessor.getInstance().getProductByID(userBean.getMemberLevel());
                if(null == oProduct)
                {       
                    LogTools.getInstance().insertLog(DebugLevel.WARNING,"User register request from IP:"+request.getRemoteAddr()+", but the target product is not existed!");                    
                }
                else
                {
                    if(oProduct.getPaid() == CommonDefine.PAID_PRODUCT)
                    {
                        LogTools.getInstance().insertLog(DebugLevel.INFO,"User register paid product request from IP:"+request.getRemoteAddr());                    
                        
                        //paid user register
                        if((new SignupController()).registerNormalUser(userBean))
                        {
                            LogTools.getInstance().insertLog(DebugLevel.INFO,"Success to register paid product request from IP:"+request.getRemoteAddr()+", User:"+userBean.getLogin_name());                    
                            
                            forwardName=WebConstants.FORWARD_SUCCESS;
                            
                            String paypalCmd = WebappResManager.getInstance().getPaypal_subscription_cmd();
                            String hosted_button_id = DBAccessor.getInstance().getProductPaypalButtonID(userBean.getMemberLevel());
                            
                            request.setAttribute("cmd", paypalCmd);
                            request.setAttribute("hosted_button_id", hosted_button_id);
                            
                            //use Email as custom name to verify
                            request.setAttribute("custom", freeTrialRegisterForm.getEmail());
                            
                            LogTools.getInstance().insertLog(DebugLevel.INFO,"Send payment request to Paypal for User:"+userBean.getLogin_name()+", button id:"+hosted_button_id);                    
                            
                            return mapping.findForward("successful_paid");
                        }
                        else
                        {
                            LogTools.getInstance().insertLog(DebugLevel.INFO,"Failed to register paid product request from IP:"+request.getRemoteAddr()+", User:"+userBean.getLogin_name());                    
                        }
                    }
                    else
                    {
                        LogTools.getInstance().insertLog(DebugLevel.INFO,"User register free trial product request from IP:"+request.getRemoteAddr());                    
                        
                        //free trial user register
                        if((new SignupController()).registerFreeTrialUser(userBean))
                        {
                            LogTools.getInstance().insertLog(DebugLevel.INFO,"Success to register free trial product request from IP:"+request.getRemoteAddr()+", User:"+userBean.getLogin_name());                    
                            
                            ActionMessages infos = new ActionMessages();
                            infos.add("prompt_info", new ActionMessage("free.signup.success.prompt.info"));
                            saveErrors(request, infos);
                            
                            ActionForward forward = new ActionForward();
                            forward.setPath(mapping.findForward("successful_free").getPath());
                            forward.setRedirect(true);
                            
                            return forward;
                        }
                        else
                        {
                            LogTools.getInstance().insertLog(DebugLevel.INFO,"Failed to register free trial product request from IP:"+request.getRemoteAddr()+", User:"+userBean.getLogin_name());                    
                        }
                    }
                }
            }
            else
            {
                ActionMessages errors = new ActionMessages();
                errors.add("securitycode", new ActionMessage("signup.securitycode.not.equal.error"));                
                saveErrors(request, errors);
                                    
                return new ActionForward(mapping.getInput()); 
            }
        }
        catch(EmailDuplicatedException emailExp)
        {
            emailExp.printStackTrace();
            
            ActionMessages errors = new ActionMessages();
            errors.add("email", new ActionMessage("signup.email.duplicated.error"));            
            saveErrors(request, errors);
                                
            return new ActionForward(mapping.getInput());             
        }
        catch(MobileDuplicatedException mobileExp)
        {
            mobileExp.printStackTrace();
            LogTools.getInstance().insertLog(DebugLevel.ERROR,CommonTools.getExceptionDescribe(mobileExp));
            
            ActionMessages errors = new ActionMessages();
            errors.add("mobilenumber", new ActionMessage("signup.mobilenumber.duplicated.error"));            
            saveErrors(request, errors);
                                
            return new ActionForward(mapping.getInput()); 
        }
        catch(DataInvalideException dataExp)
        {
            dataExp.printStackTrace();
            LogTools.getInstance().insertLog(DebugLevel.ERROR,CommonTools.getExceptionDescribe(dataExp));
            
            ActionMessages errors = new ActionMessages();
            errors.add("error", new ActionMessage("signup.request.data.error"));            
            saveErrors(request, errors);
            
            return new ActionForward(mapping.getInput());
        }
        catch(Exception e)
        {
            e.printStackTrace();
            LogTools.getInstance().insertLog(DebugLevel.ERROR,CommonTools.getExceptionDescribe(e));
            
            ActionMessages errors = new ActionMessages();
            errors.add("error", new ActionMessage("signup.request.data.error"));            
            saveErrors(request, errors);
            
            return new ActionForward(mapping.getInput());
        }
        
        ActionMessages errors = new ActionMessages();
        errors.add("error", new ActionMessage("signup.request.data.error"));            
        saveErrors(request, errors);
        
        return mapping.findForward(forwardName);
    }
}
