/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webapp.controller.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.cleartraders.common.entity.UserBean;
import com.cleartraders.common.util.log.DebugLevel;
import com.cleartraders.common.util.log.LogTools;
import com.cleartraders.common.util.tools.CommonTools;
import com.cleartraders.webapp.WebConstants;
import com.cleartraders.webapp.controller.form.UpdateMySignalForm;
import com.cleartraders.webapp.model.myaccount.AccountController;

/** 
 * MyEclipse Struts
 * Creation date: 09-24-2008
 * 
 * XDoclet definition:
 * @struts.action path="/myaccount/updateMySignal" name="updateMySignalForm" scope="request" validate="true"
 * @struts.action-forward name="sessionended" path="/login/userLogin.jsp"
 * @struts.action-forward name="successful" path="/myaccount/mysignals.jsp"
 */
public class UpdateMySignalAction extends BaseAction
{
    /*
     * Generated Methods
     */

    /** 
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward executeAction(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
    {
        String forwardName=WebConstants.FORWARD_FAILED;
        
        try
        {
            HttpSession session = request.getSession();
            
            //Base action already handle logout or timeout issue, so, here we don't need check
            UserBean oUserBean = (UserBean)session.getAttribute(WebConstants.USER_KEY);
                                    
            UpdateMySignalForm updateMySignalForm = (UpdateMySignalForm) form; 
            
            int iOperation_type = Integer.parseInt(updateMySignalForm.getOperation_type());
            
            //updated by Peter 2009-5-14, only use Save All type, disable others
            
//            if(WebConstants.UPDATE_SPECIFIC_SIGNAL_SETTING == iOperation_type)
//            {        
//                LogTools.getInstance().insertLog(DebugLevel.INFO,"Update Specific Signal setting request from User:"+oUserBean.getLogin_name()+", IP:"+request.getRemoteAddr());
//                
//                long mysignalID = Long.parseLong(updateMySignalForm.getSignal_id());
//                
//                int iSmsFlag = Integer.parseInt(updateMySignalForm.getSms_enable_flag());
//                
//                int iEmailFlag = Integer.parseInt(updateMySignalForm.getEmail_enable_flag());
//                
//                int iActiveFlag = Integer.parseInt(updateMySignalForm.getActive_enable_flag());
//                
//                if(new AccountController().updateMySignalEnableSetting(oUserBean,mysignalID,iActiveFlag,iSmsFlag,iEmailFlag))
//                {
//                    List<UserSignalPreferenceBean> oAllMySignalPrferenceBean = (new AccountController()).getUserSignalPreferenceBean(oUserBean,false);
//                
//                    request.setAttribute(WebConstants.ALL_MY_ACTIVE_SIGNAL, oAllMySignalPrferenceBean);
//                    
//                    forwardName=WebConstants.FORWARD_SUCCESS;
//                }
//            }
//            else if(WebConstants.REMOVE_SPECIFIC_SIGNAL_SETTING == iOperation_type)
//            {
//                LogTools.getInstance().insertLog(DebugLevel.INFO,"Remove Specific Signal setting request from User:"+oUserBean.getLogin_name()+", IP:"+request.getRemoteAddr());
//                
//                long mysignalID = Long.parseLong(updateMySignalForm.getSignal_id());
//                
//                if(new AccountController().removeMySignalSetting(oUserBean,mysignalID))
//                {
//                    List<UserSignalPreferenceBean> oAllMySignalPrferenceBean = (new AccountController()).getUserSignalPreferenceBean(oUserBean,false);
//                
//                    request.setAttribute(WebConstants.ALL_MY_ACTIVE_SIGNAL, oAllMySignalPrferenceBean);
//                    
//                    forwardName=WebConstants.FORWARD_SUCCESS;
//                }
//            }
//            else if(WebConstants.SAVE_ALL_SPECIFIC_SIGNAL_SETTING == iOperation_type)
            //end updated
            
            if(WebConstants.SAVE_ALL_SPECIFIC_SIGNAL_SETTING == iOperation_type)
            {
                LogTools.getInstance().insertLog(DebugLevel.INFO,"Save all Signals setting request from User:"+oUserBean.getLogin_name()+", IP:"+request.getRemoteAddr());
                
                String all_signal_setting_value = updateMySignalForm.getAll_signal_setting_value();
                
                String[] all_signal_setting_list = all_signal_setting_value.split(";");
                
                if(checkRequestMarketWithMembership(all_signal_setting_list, oUserBean))
                {
                    updateAllPreference(all_signal_setting_list, oUserBean);
                }
                else
                {
                    LogTools.getInstance().insertLog(DebugLevel.WARNING,"Failed to save all Signals setting request from User:"+oUserBean.getLogin_name()+", IP:"+request.getRemoteAddr()
                            +", because user trying to active markets more than Membership limitation!");
                }
                                
                forwardName=WebConstants.FORWARD_SUCCESS;
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            
            LogTools.getInstance().insertLog(DebugLevel.ERROR,CommonTools.getExceptionDescribe(e));
        }
        
        return mapping.findForward(forwardName);
    }
    
    private void updateAllPreference(String[] all_signal_setting_list, UserBean oUserBean)
    {
        if(null == all_signal_setting_list && null == oUserBean)
        {
            return;
        }
        
        AccountController accounterController = new AccountController();
        for(int i=0; i<all_signal_setting_list.length; i++)
        {
            all_signal_setting_list[i] = all_signal_setting_list[i].trim();
            if(all_signal_setting_list[i].length() > 0)
            {
                String[] single_signal_setting = all_signal_setting_list[i].split(",");
                
                long mysignalID = Long.parseLong(single_signal_setting[0]);
                
                int iActiveFlag = Integer.parseInt(single_signal_setting[1]);
                
                int iEmailFlag = Integer.parseInt(single_signal_setting[2]);
                
                int iSmsFlag = Integer.parseInt(single_signal_setting[3]);
                
                accounterController.updateMySignalEnableSetting(oUserBean,mysignalID,iActiveFlag,iSmsFlag,iEmailFlag);
            }
        }
    }
    
    private boolean checkRequestMarketWithMembership(String[] all_signal_setting_list, UserBean oUserBean)
    {
        if(null == all_signal_setting_list && null == oUserBean)
        {
            return false;
        }
        
        int totalMarketsOfMembership = new AccountController().getTotalMarketsOfUser(oUserBean);
        
        int currentActivedMarketAmount = 0;
        for(int i=0; i<all_signal_setting_list.length; i++)
        {
            all_signal_setting_list[i] = all_signal_setting_list[i].trim();
            if(all_signal_setting_list[i].length() > 0)
            {
                String[] single_signal_setting = all_signal_setting_list[i].split(",");
                
                int iActiveFlag = Integer.parseInt(single_signal_setting[1]);
                if(iActiveFlag == WebConstants.ENABLE)
                {
                    currentActivedMarketAmount ++;
                }
            }
        }
        
        return currentActivedMarketAmount<=totalMarketsOfMembership;
    }
}
