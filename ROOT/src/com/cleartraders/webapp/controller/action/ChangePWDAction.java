/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webapp.controller.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.cleartraders.common.entity.UserBean;
import com.cleartraders.common.util.log.DebugLevel;
import com.cleartraders.common.util.log.LogTools;
import com.cleartraders.common.util.tools.CommonTools;
import com.cleartraders.webapp.WebConstants;
import com.cleartraders.webapp.controller.form.ChangePWDForm;
import com.cleartraders.webapp.model.myaccount.AccountController;

/** 
 * MyEclipse Struts
 * Creation date: 09-22-2008
 * 
 * XDoclet definition:
 * @struts.action scope="request" validate="true"
 * @struts.action-forward name="failed" path="/myaccount/changepwd.jsp"
 * @struts.action-forward name="sessionended" path="/login/userLogin.jsp"
 * @struts.action-forward name="successful" path="/myaccount/changepwd.jsp"
 */
public class ChangePWDAction extends BaseAction
{
    /*
     * Generated Methods
     */

    /** 
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward executeAction(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
    {
        String forwardName=WebConstants.FORWARD_FAILED;
        
        try
        {
            HttpSession session = request.getSession();
            
            //Base action already handle logout or timeout issue, so, here we don't need check
            UserBean oUserBean = (UserBean)session.getAttribute(WebConstants.USER_KEY);
            
            LogTools.getInstance().insertLog(DebugLevel.INFO,"Change Password request from User:"+oUserBean.getLogin_name()+", IP:"+request.getRemoteAddr());
            
            //get form fields
            ChangePWDForm changePWDForm = (ChangePWDForm) form;
            
            String currentPwd = changePWDForm.getCurrent_password();
            String newPwd = changePWDForm.getNew_password();
            String newConfirmPwd = changePWDForm.getConfirm_new_password();
            
            ActionMessages errors = checkFormField(currentPwd, newPwd, newConfirmPwd);
            saveErrors(request, errors);
            
            if(!errors.isEmpty())
            {
                return mapping.findForward(forwardName);
            }
            
            //check current password
            if(new AccountController().checkCurrentPassword(oUserBean.getLogin_name(),currentPwd))
            {            
                //update into DB
                if(new AccountController().changeUserPWD(oUserBean.getId(),newPwd))
                {                
                    forwardName = WebConstants.FORWARD_SUCCESS;
                    
                    LogTools.getInstance().insertLog(DebugLevel.INFO,"Change Password request from User:"+oUserBean.getLogin_name()+", IP:"+request.getRemoteAddr()+" successfully!");
                }
                else
                {
                    errors.add("error", new ActionMessage("changepwd.change.error"));
                    
                    saveErrors(request, errors);
                    
                    forwardName=WebConstants.FORWARD_FAILED;
                    
                    LogTools.getInstance().insertLog(DebugLevel.ERROR,"Change Password request from User:"+oUserBean.getLogin_name()+", IP:"+request.getRemoteAddr()+" failed!");
                }
            }
            else
            {
                errors.add("current_password", new ActionMessage("changepwd.currentpassword.error"));
                
                saveErrors(request, errors);
                
                forwardName=WebConstants.FORWARD_FAILED;
                
                LogTools.getInstance().insertLog(DebugLevel.WARNING,"Change Password request from User:"+oUserBean.getLogin_name()+
                        ", IP:"+request.getRemoteAddr()+" failed because the current password is error!");
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            
            LogTools.getInstance().insertLog(DebugLevel.ERROR,CommonTools.getExceptionDescribe(e));
        }
        
        return mapping.findForward(forwardName);
    }
    
    private ActionMessages checkFormField(String currentPwd, String newPwd, String newConfirmPwd)
    {
        ActionMessages errors = new ActionMessages();    
        
        if(null == currentPwd || "".equals(currentPwd))
        {
            errors.add("current_password", new ActionMessage("changepwd.no.currentpassword.error"));
        }
        
        if(null == newPwd || "".equals(newPwd))
        {
            errors.add("new_password", new ActionMessage("changepwd.no.newpassword.error"));
        }
        
        if(null == newConfirmPwd || "".equals(newConfirmPwd))
        {
            errors.add("confirm_new_password", new ActionMessage("changepwd.no.confirmnewpassword.error"));
        }
        
        if(errors.isEmpty())
        {
            if(!newPwd.equals(newConfirmPwd))
            {
                errors.add("new_password", new ActionMessage("changepwd.password.not.consistent.error"));                
            }
        }
        
        return errors;
    }
}
