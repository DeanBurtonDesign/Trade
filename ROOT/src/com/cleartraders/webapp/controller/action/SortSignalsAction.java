/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webapp.controller.action;

import java.io.IOException;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.cleartraders.common.db.DataCache;
import com.cleartraders.common.define.CommonDefine;
import com.cleartraders.common.entity.MarketPeriodBean;
import com.cleartraders.common.entity.MarketTypeBean;
import com.cleartraders.common.entity.MarketTypeBeanComparator;
import com.cleartraders.common.entity.Signal;
import com.cleartraders.common.entity.SignalIndicatorComparator;
import com.cleartraders.common.entity.SignalLatestComparator;
import com.cleartraders.common.entity.SignalMarketComparator;
import com.cleartraders.common.entity.SignalOldestComparator;
import com.cleartraders.common.entity.StrategyBean;
import com.cleartraders.common.entity.UserBean;
import com.cleartraders.common.entity.UserSignalPreferenceBaseBean;
import com.cleartraders.common.util.log.DebugLevel;
import com.cleartraders.common.util.log.LogTools;
import com.cleartraders.common.util.tools.CommonTools;
import com.cleartraders.webapp.WebConstants;
import com.cleartraders.webapp.config.WebappResManager;
import com.cleartraders.webapp.controller.form.SortSignalForm;
import com.cleartraders.webapp.model.activesignals.ActiveSignalsList;
import com.cleartraders.webapp.model.myaccount.AccountController;

/** 
 * MyEclipse Struts
 * Creation date: 05-05-2010
 * 
 * XDoclet definition:
 * @struts.action path="/sortSignals" name="SortSignalsForm" scope="request" validate="true"
 */
public class SortSignalsAction extends BaseAction
{
    @Override
    protected ActionForward executeAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
    {
        String forwardName=WebConstants.FORWARD_FAILED;
        
        try
        {
            HttpSession session = request.getSession();
            
            //Base action already handle logout or timeout issue, so, here we don't need check
            UserBean oUserBean = (UserBean)session.getAttribute(WebConstants.USER_KEY);
            
            LogTools.getInstance().insertLog(DebugLevel.INFO,"Sort signals request from User:"+oUserBean.getLogin_name()+", IP:"+request.getRemoteAddr()+", time:"+System.currentTimeMillis());
            
            SortSignalForm sortSignalForm = (SortSignalForm) form;
            
            int sortSignalType = CommonDefine.SORT_BY_LATEST;
            
            //get return data
            if(null != sortSignalForm && sortSignalForm.getSort_type_id() != null)
            {
                sortSignalType = Integer.parseInt(sortSignalForm.getSort_type_id());
                request.setAttribute(WebConstants.SIGNAL_SORT_TYPE, sortSignalType);
            }
            
            ActiveSignalsList signalController = new ActiveSignalsList();
            List<Signal> oCurrentPageOfActiveSignal = signalController.getSpecificPageOfActiveSignals(oUserBean,0,WebappResManager.getInstance().getEach_page_size());
            
            //sort signal according to sort type id
            if(CommonDefine.SORT_BY_LATEST == sortSignalType)
            {
                Comparator<Signal> comp = new SignalLatestComparator();
                Collections.sort(oCurrentPageOfActiveSignal,comp);
            }
            else if(CommonDefine.SORT_BY_OLDEST == sortSignalType)
            {
                Comparator<Signal> comp = new SignalOldestComparator();
                Collections.sort(oCurrentPageOfActiveSignal,comp);
            }
            else if(CommonDefine.SORT_BY_MARKET == sortSignalType)
            {
                Comparator<Signal> comp = new SignalMarketComparator();
                Collections.sort(oCurrentPageOfActiveSignal,comp);
            }
            else
            {
                //sort by indicator
                Comparator<Signal> comp = new SignalIndicatorComparator();
                Collections.sort(oCurrentPageOfActiveSignal,comp);
            }
            
            request.setAttribute(WebConstants.ALL_ACTIVE_SIGNAL, oCurrentPageOfActiveSignal);
                            
            AccountController accountController = new AccountController();     
                        
            LogTools.getInstance().insertLog(DebugLevel.INFO,"Prepare to get all active signal at "+System.currentTimeMillis());
                          
            //get all active markets of current user
            List<MarketTypeBean> oAllMarketList = DataCache.getInstance().getAllMarketType();
            Comparator<MarketTypeBean> compForMarket = new MarketTypeBeanComparator();
            Collections.sort(oAllMarketList,compForMarket);        
            request.setAttribute(WebConstants.ALL_MARKET_TYPE, oAllMarketList);
            
            //get all strategy info
            Map<Long, StrategyBean> oAllStrategyMap = accountController.getAllStrategy();
            request.setAttribute(WebConstants.ALL_STRATEGY_INFO, oAllStrategyMap);
            
            //get all time-frame info
            List<MarketPeriodBean> allMarketPeriod = DataCache.getInstance().getAllMarketPeriod();
            request.setAttribute(WebConstants.ALL_MARTKET_PERIOD, allMarketPeriod);
            
            //get all My Market preference of current user
            HashMap<String, UserSignalPreferenceBaseBean> allMyActiveSignalMap = new HashMap<String, UserSignalPreferenceBaseBean>();
            List<UserSignalPreferenceBaseBean> oAllMySignalPrferenceBean = accountController.getUserSignalPreferenceBaseBean(oUserBean,false);
            for(int i=0; i<oAllMySignalPrferenceBean.size(); i++)
            {
                UserSignalPreferenceBaseBean oBean = oAllMySignalPrferenceBean.get(i);                    
                String signalPreferenceId = oBean.getStrategy_id()+":"+oBean.getMarket_type_id()+":"+oBean.getMarket_period_id();
                    
                allMyActiveSignalMap.put(signalPreferenceId, oAllMySignalPrferenceBean.get(i));
            }                
            request.setAttribute(WebConstants.ALL_MY_ACTIVE_SIGNAL_MAP, allMyActiveSignalMap);
            
            //get all active signals preference
            List<UserSignalPreferenceBaseBean> oActiveSignalsPreference = accountController.getActiveUserSignalPreferenceBean(oUserBean);
            request.setAttribute(WebConstants.USER_ACTIVE_SIGNAL_PREFERENCE, oActiveSignalsPreference);
                        
            forwardName=WebConstants.FORWARD_SUCCESS;
        }
        catch(Exception e)        
        {
            e.printStackTrace();
        
            LogTools.getInstance().insertLog(DebugLevel.ERROR,CommonTools.getExceptionDescribe(e));
        }
    
        return mapping.findForward(forwardName);
    }
}
