/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webapp.controller.action;

import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.cleartraders.common.db.DataCache;
import com.cleartraders.common.entity.MarketPeriodBean;
import com.cleartraders.common.entity.MarketTypeBean;
import com.cleartraders.common.entity.MarketTypeBeanComparator;
import com.cleartraders.common.entity.Signal;
import com.cleartraders.common.entity.SignalLatestComparator;
import com.cleartraders.common.entity.StrategyBean;
import com.cleartraders.common.entity.UserBean;
import com.cleartraders.common.entity.UserSignalPreferenceBaseBean;
import com.cleartraders.common.util.log.DebugLevel;
import com.cleartraders.common.util.log.LogTools;
import com.cleartraders.common.util.tools.CommonTools;
import com.cleartraders.webapp.WebConstants;
import com.cleartraders.webapp.config.WebappResManager;
import com.cleartraders.webapp.controller.form.UserLoginForm;
import com.cleartraders.webapp.model.activesignals.ActiveSignalsList;
import com.cleartraders.webapp.model.login.LoginController;
import com.cleartraders.webapp.model.myaccount.AccountController;


/** 
 * MyEclipse Struts
 * Creation date: 09-07-2008
 * 
 * XDoclet definition:
 * @struts.action path="/userLogin" name="userLoginForm" input="/form/userLogin.jsp" scope="request" validate="true"
 * @struts.action-forward name="failed" path="/login.jsp"
 * @struts.action-forward name="successful" path="/signals.html"
 */
public class UserLoginAction extends Action
{
    /*
     * Generated Methods
     */

    /** 
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
    {        
        String forwardName=WebConstants.FORWARD_FAILED;
                   
        try
        {
            LogTools.getInstance().insertLog(DebugLevel.INFO,"User login request from IP:"+request.getRemoteAddr());
            
            UserLoginForm userLoginForm = (UserLoginForm) form;
            HttpSession session = (HttpSession) request.getSession();
            
            LoginController loginController = new LoginController(); 
            
            //check user exist or not
            if(!loginController.userExist(userLoginForm.getUsername()))
            {
                LogTools.getInstance().insertLog(DebugLevel.WARNING,"User login request from IP:"+request.getRemoteAddr()+", but user:"+userLoginForm.getUsername()+" doesn't exist!");
                
                forwardName=WebConstants.FORWARD_FAILED;
                
                ActionMessages errors = new ActionMessages();
                errors.add("username", new ActionMessage("login.user.not.exist.error"));
                
                saveErrors(request, errors);
                                    
                return new ActionForward(mapping.getInput());
            }
            
            //check user was already verified by confirmed email link
            if(!loginController.userWasVerified(userLoginForm.getUsername()))
            {
                LogTools.getInstance().insertLog(DebugLevel.WARNING,"User login request from IP:"+request.getRemoteAddr()+", but user:"+userLoginForm.getUsername()+" isn't verified!");
                
                forwardName=WebConstants.FORWARD_FAILED;
                
                ActionMessages errors = new ActionMessages();
                errors.add("username", new ActionMessage("login.user.not.verified.error"));
                
                saveErrors(request, errors);
                                    
                return new ActionForward(mapping.getInput());
            }
            
            //check user is NOT expired
            if(!loginController.userIsNotExpired(userLoginForm.getUsername()))
            {
                LogTools.getInstance().insertLog(DebugLevel.WARNING,"User login request from IP:"+request.getRemoteAddr()+", but user:"+userLoginForm.getUsername()+" is expired!");
                
                forwardName=WebConstants.FORWARD_FAILED;
                
                ActionMessages errors = new ActionMessages();
                errors.add("username", new ActionMessage("login.user.expired.error"));
                
                saveErrors(request, errors);
                                    
                return new ActionForward(mapping.getInput());
            }
            
            //check username and password
            if(loginController.loginCheck(userLoginForm.getUsername(),userLoginForm.getPassword()))
            {
                LogTools.getInstance().insertLog(DebugLevel.INFO,"User login request from IP:"+request.getRemoteAddr()+", and user:"+userLoginForm.getUsername()+" has passed verify! Login success!");
                
                UserBean oUserBean = loginController.getUserBeanByName(userLoginForm.getUsername());
                
                //update last login
                long lastLogin = System.currentTimeMillis();
                oUserBean.setLast_login(lastLogin);
                loginController.updateUserLastLogin(oUserBean, lastLogin);
                
                //add into session
                session.setAttribute(WebConstants.USER_KEY, oUserBean);
                
                ActiveSignalsList signalController = new ActiveSignalsList();
                List<Signal> oCurrentPageOfActiveSignal = signalController.getSpecificPageOfActiveSignals(oUserBean,0,WebappResManager.getInstance().getEach_page_size());
                
                //sort signal 
                Comparator<Signal> comp = new SignalLatestComparator();
                Collections.sort(oCurrentPageOfActiveSignal,comp);
                
                request.setAttribute(WebConstants.ALL_ACTIVE_SIGNAL, oCurrentPageOfActiveSignal);
                                
                AccountController accountController = new AccountController();     
                //get all active markets of current user
                List<MarketTypeBean> oAllMarketList = DataCache.getInstance().getAllMarketType();
                Comparator<MarketTypeBean> compForMarket = new MarketTypeBeanComparator();
                Collections.sort(oAllMarketList,compForMarket);        
                request.setAttribute(WebConstants.ALL_MARKET_TYPE, oAllMarketList);
                
                //get all strategy info
                Map<Long, StrategyBean> oAllStrategyMap = accountController.getAllStrategy();
                request.setAttribute(WebConstants.ALL_STRATEGY_INFO, oAllStrategyMap);
                
                //get all time-frame info
                List<MarketPeriodBean> allMarketPeriod = DataCache.getInstance().getAllMarketPeriod();
                request.setAttribute(WebConstants.ALL_MARTKET_PERIOD, allMarketPeriod);
                
                //get all My Market preference of current user
                HashMap<String, UserSignalPreferenceBaseBean> allMyActiveSignalMap = new HashMap<String, UserSignalPreferenceBaseBean>();
                List<UserSignalPreferenceBaseBean> oAllMySignalPrferenceBean = accountController.getUserSignalPreferenceBaseBean(oUserBean,false);
                for(int i=0; i<oAllMySignalPrferenceBean.size(); i++)
                {
                    UserSignalPreferenceBaseBean oBean = oAllMySignalPrferenceBean.get(i);                    
                    String signalPreferenceId = oBean.getStrategy_id()+":"+oBean.getMarket_type_id()+":"+oBean.getMarket_period_id();
                        
                    allMyActiveSignalMap.put(signalPreferenceId, oAllMySignalPrferenceBean.get(i));
                }                
                request.setAttribute(WebConstants.ALL_MY_ACTIVE_SIGNAL_MAP, allMyActiveSignalMap);
                
                //get all active signals preference
                List<UserSignalPreferenceBaseBean> oActiveSignalsPreference = accountController.getActiveUserSignalPreferenceBean(oUserBean);
                request.setAttribute(WebConstants.USER_ACTIVE_SIGNAL_PREFERENCE, oActiveSignalsPreference);
                
                forwardName=WebConstants.FORWARD_SUCCESS;
            }
            else
            {
                LogTools.getInstance().insertLog(DebugLevel.WARNING,"User login request from IP:"+request.getRemoteAddr()+", but user:"+userLoginForm.getUsername()+" password is wrong!");
                
                forwardName=WebConstants.FORWARD_FAILED;
                
                ActionMessages errors = new ActionMessages();
                errors.add("username", new ActionMessage("login.username.password.error"));
                
                saveErrors(request, errors);
                                    
                return new ActionForward(mapping.getInput());
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            
            LogTools.getInstance().insertLog(DebugLevel.ERROR,CommonTools.getExceptionDescribe(e));
        }
        
        return mapping.findForward(forwardName);
    }
}
