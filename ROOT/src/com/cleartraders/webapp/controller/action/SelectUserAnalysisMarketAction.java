/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webapp.controller.action;

import java.io.IOException;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.cleartraders.common.entity.QuickLinkBean;
import com.cleartraders.common.entity.QuickLinkComparator;
import com.cleartraders.common.entity.UserBean;
import com.cleartraders.common.util.log.DebugLevel;
import com.cleartraders.common.util.log.LogTools;
import com.cleartraders.common.util.tools.CommonTools;
import com.cleartraders.webapp.WebConstants;
import com.cleartraders.webapp.controller.form.SelectMarketForm;
import com.cleartraders.webapp.model.analysis.AnalysisController;
import com.cleartraders.webapp.model.bean.UserAnalysisMarketBean;
import com.cleartraders.webapp.model.myaccount.AccountController;


/** 
 * MyEclipse Struts
 * Creation date: 10-25-2008
 * 
 * XDoclet definition:
 * @struts.action path="/analysis/updateUserAnalysisMarket" name="selectMarketForm" scope="request" validate="true"
 */
public class SelectUserAnalysisMarketAction extends BaseAction
{
    protected ActionForward executeAction(ActionMapping mapping,
            ActionForm form, HttpServletRequest request,
            HttpServletResponse response) throws IOException, ServletException
    {
        String forwardName=WebConstants.FORWARD_FAILED;
        
        try
        {
            SelectMarketForm selectMarketForm = (SelectMarketForm) form;
            if(selectMarketForm.getCurrent_market_id() == null || selectMarketForm.getUpdate_result() == null)
            {
                return mapping.findForward(forwardName);
            }
            
            HttpSession session = request.getSession();
            
            //Base action already handle logout or timeout issue, so, here we don't need check
            UserBean oUserBean = (UserBean)session.getAttribute(WebConstants.USER_KEY);
                    
            LogTools.getInstance().insertLog(DebugLevel.INFO,"Select User Analsysis Market request from User:"+oUserBean.getLogin_name()+", IP:"+request.getRemoteAddr());
            
            //parse new market
            String newMarketString = selectMarketForm.getUpdate_result();
            String[] newMarketValue = newMarketString.split(";");
            long newMarketID=0;
            long newSignalPeriodID=0;
            
            boolean needUpdated = false;
            //in current system logic, it can be only choose one
            for(int i=0; i<newMarketValue.length; i++)
            {
                if(newMarketValue[i].trim().length() > 0)
                {
                    String newSingleMarket = newMarketValue[i];
                    String[] newSingleMarketList = newSingleMarket.split(",");
                    
                    if(newSingleMarketList.length == 2)
                    {
                        newMarketID = Long.parseLong(newSingleMarketList[0]);
                        newSignalPeriodID = Long.parseLong(newSingleMarketList[1]);
                        
                        needUpdated = true;
                        break;
                    }
                }
            }
            
            if(needUpdated)
            {
                //previous market id
                long previousMarketID = Long.parseLong(selectMarketForm.getCurrent_market_id());
                long newStrategyID = 0;
                if(previousMarketID>=0)
                {
                    //it is change operation
                    new AnalysisController().changeAnalysisMarketCondition(oUserBean,previousMarketID,newMarketID,newStrategyID,newSignalPeriodID);
                }
                else
                {
                    //it is add operation
                    new AnalysisController().addAnalysisMarketCondition(oUserBean,newMarketID,newStrategyID,newSignalPeriodID);
                }
                
                //get all user current analysis market list
                List<UserAnalysisMarketBean> oAllAnalysisCondition = (new AnalysisController()).getUserAnalysisMarketList(oUserBean);       
                request.setAttribute(WebConstants.MY_ANALYSIS_CONDITION, oAllAnalysisCondition);
            }
            
            forwardName=WebConstants.FORWARD_SUCCESS;
                    
            //get all quick links
            List<QuickLinkBean> oQuickLinks = (new AccountController()).getAllQuickLinks(oUserBean);
            Comparator<QuickLinkBean> comp = new QuickLinkComparator();
            Collections.sort(oQuickLinks,comp);
            request.setAttribute(WebConstants.USER_QUICK_LINKS, oQuickLinks);
        }
        catch(Exception e)
        {
            e.printStackTrace();
            
            LogTools.getInstance().insertLog(DebugLevel.ERROR,CommonTools.getExceptionDescribe(e));            
        }
        
        return mapping.findForward(forwardName);
    }
}
