/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webapp.controller.action;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.cleartraders.common.db.DataCache;
import com.cleartraders.common.entity.MarketPeriodBean;
import com.cleartraders.common.entity.StrategyBean;
import com.cleartraders.common.entity.UserBean;
import com.cleartraders.common.util.log.DebugLevel;
import com.cleartraders.common.util.log.LogTools;
import com.cleartraders.common.util.tools.CommonTools;
import com.cleartraders.webapp.WebConstants;
import com.cleartraders.webapp.model.bean.UserSignalPreferenceBean;
import com.cleartraders.webapp.model.bean.UserSignalPreferenceComparator;
import com.cleartraders.webapp.model.myaccount.AccountController;

/** 
 * MyEclipse Struts
 * Creation date: 09-23-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="failed" path="/login/userLogin.jsp"
 * @struts.action-forward name="sessionended" path="/login/userLogin.jsp"
 * @struts.action-forward name="successful" path="/myaccount/mysignals.jsp"
 */
public class MySignalsAction extends BaseAction
{
    /*
     * Generated Methods
     */

    /** 
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward executeAction(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
    {
        try
        {
            HttpSession session = request.getSession();
            
            //Base action already handle logout or timeout issue, so, here we don't need check
            UserBean oUserBean = (UserBean)session.getAttribute(WebConstants.USER_KEY);
            
            LogTools.getInstance().insertLog(DebugLevel.INFO,"Get My Signal request from User:"+oUserBean.getLogin_name()+", IP:"+request.getRemoteAddr());
            
            AccountController accountController = new AccountController();
            
            List<UserSignalPreferenceBean> oAllMySignalPrferenceBean = accountController.getUserSignalPreferenceBean(oUserBean,false);
            Comparator<UserSignalPreferenceBean> comp2 = new UserSignalPreferenceComparator();
            Collections.sort(oAllMySignalPrferenceBean,comp2);            
            request.setAttribute(WebConstants.ALL_MY_ACTIVE_SIGNAL, oAllMySignalPrferenceBean);
            
            int activedMarketAmount = 0;
            for(int i=0; i<oAllMySignalPrferenceBean.size(); i++)
            {
                UserSignalPreferenceBean oSignalPerferenceBean = oAllMySignalPrferenceBean.get(i);
                if(oSignalPerferenceBean.isActive())
                {
                    activedMarketAmount++;
                }
            }
            request.setAttribute(WebConstants.ACTIVED_MARKET_AMOUNT, Integer.valueOf(activedMarketAmount));
            
            List<MarketPeriodBean> allTimeFrames = DataCache.getInstance().getAllMarketPeriod();
            request.setAttribute(WebConstants.ALL_MARTKET_PERIOD, allTimeFrames);
            
            Map<Long, List<StrategyBean>> marketStrategy = accountController.getMarketStrategyMap();
            request.setAttribute(WebConstants.MARKET_STRATEGY_MAP, marketStrategy);
            
            Map<Long, List<MarketPeriodBean>> strategyTimeframe = accountController.getStrategyTimeframeMap();
            request.setAttribute(WebConstants.STRATEGY_TIMEFRAME_MAP, strategyTimeframe);
            
            int totalMarketsOfMembership = accountController.getTotalMarketsOfUser(oUserBean);
            request.setAttribute(WebConstants.TOTAL_MARKETS_OF_MEMBERSHIP, Integer.valueOf(totalMarketsOfMembership));
        }
        catch(Exception e)
        {
            e.printStackTrace();
            
            LogTools.getInstance().insertLog(DebugLevel.ERROR,CommonTools.getExceptionDescribe(e));      
        }
        return mapping.findForward(WebConstants.FORWARD_SUCCESS);
    }
}
