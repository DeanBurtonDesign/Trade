/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webapp.controller.action;

import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.cleartraders.common.db.DataCache;
import com.cleartraders.common.entity.MarketPeriodBean;
import com.cleartraders.common.entity.MarketTypeBean;
import com.cleartraders.common.entity.MarketTypeBeanComparator;
import com.cleartraders.common.entity.ProductBean;
import com.cleartraders.common.entity.QuickLinkBean;
import com.cleartraders.common.entity.QuickLinkComparator;
import com.cleartraders.common.entity.StrategyBean;
import com.cleartraders.common.entity.UserBean;
import com.cleartraders.common.entity.UserSignalPreferenceBaseBean;
import com.cleartraders.common.util.log.DebugLevel;
import com.cleartraders.common.util.log.InfoTrace;
import com.cleartraders.common.util.log.LogTools;
import com.cleartraders.common.util.tools.CommonTools;
import com.cleartraders.webapp.WebConstants;
import com.cleartraders.webapp.model.login.LoginController;
import com.cleartraders.webapp.model.myaccount.AccountController;
import com.cleartraders.webapp.model.payment.PaymentPDTController;

/** 
 * MyEclipse Struts
 * Creation date: 02-08-2009
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class PaypalPDTCallbackAction extends Action
{
    /*
     * Generated Methods
     */

    /** 
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
    {        
        String forwardName=WebConstants.FORWARD_FAILED;
        
        try
        {
            String tx = request.getParameter("tx");
            
            InfoTrace.getInstance().printInfo(DebugLevel.INFO, "Receive Paypal callback for transaction ID: ' "+tx+" ', from IP"+request.getRemoteAddr());
            LogTools.getInstance().insertLog(DebugLevel.INFO, "Receive Paypal callback for transaction ID: ' "+tx+" ', from IP"+request.getRemoteAddr());
        
            if(null == tx || "".equals(tx))
            {
                ActionMessages errors = new ActionMessages();
                errors.add("error", new ActionMessage("payment.result.data.error"));
                saveErrors(request, errors);
                
                InfoTrace.getInstance().printInfo(DebugLevel.ERROR, "Receive Invalid transaction. ID is null or Empty, from IP"+request.getRemoteAddr());
                LogTools.getInstance().insertLog(DebugLevel.ERROR, "Receive Invalid transaction. ID is null or Empty, from IP"+request.getRemoteAddr());
                            
                return mapping.findForward(forwardName);
            }
            
            PaymentPDTController paymentController = new PaymentPDTController();
            
            if(paymentController.handlePaypalPayment(tx))
            {
                InfoTrace.getInstance().printInfo(DebugLevel.INFO, "Handle Paypal callback for transaction ID: ' "+tx+" ' Successfully!");
                LogTools.getInstance().insertLog(DebugLevel.INFO, "Handle Paypal callback for transaction ID: ' "+tx+" ' Successfully!");
                
                int paymentType = -1;
                paymentType = paymentController.getPaymentType(tx);
                
                InfoTrace.getInstance().printInfo(DebugLevel.INFO, "Type of Payment is "+paymentType);
                LogTools.getInstance().insertLog(DebugLevel.INFO, "Type of Payment is "+paymentType);
                
                //get initial parameters for tracking code
                String initialParameters = "?tx="+tx;
                
                String amt = request.getParameter("amt");
                if(null == amt) 
                {
                    amt = "";
                }
                else
                {
                    initialParameters = initialParameters + "&amt="+amt;
                }
                
                InfoTrace.getInstance().printInfo(DebugLevel.INFO, "Tracking parameter is "+initialParameters);
                LogTools.getInstance().insertLog(DebugLevel.INFO, "Tracking parameter is "+initialParameters);
                                                
                switch(paymentType)
                {
                    case WebConstants.SMS_PACKAGE_50:
                    {
                        InfoTrace.getInstance().printInfo(DebugLevel.INFO, "This is 50 sms packages payment.");
                        LogTools.getInstance().insertLog(DebugLevel.INFO, "This is 50 sms packages payment.");
                        
                        forwardName = WebConstants.SMS_PACKAGE_50_NAME;
                        
                        ActionForward forward = new ActionForward();
                        forward.setPath(mapping.findForward(forwardName).getPath()+initialParameters);
                        forward.setRedirect(true);
                        
                        return forward;
                    }
                    case WebConstants.SMS_PACKAGE_250:
                    {
                        InfoTrace.getInstance().printInfo(DebugLevel.INFO, "This is 250 sms packages payment.");
                        LogTools.getInstance().insertLog(DebugLevel.INFO, "This is 250 sms packages payment.");
                        
                        forwardName = WebConstants.SMS_PACKAGE_250_NAME;

                        ActionForward forward = new ActionForward();
                        forward.setPath(mapping.findForward(forwardName).getPath()+initialParameters);
                        forward.setRedirect(true);
                        
                        return forward;
                    }
                    case WebConstants.SMS_PACKAGE_500:
                    {
                        InfoTrace.getInstance().printInfo(DebugLevel.INFO, "This is 500 sms packages payment.");
                        LogTools.getInstance().insertLog(DebugLevel.INFO, "This is 500 sms packages payment.");
                        
                        forwardName = WebConstants.SMS_PACKAGE_500_NAME;
                        
                        ActionForward forward = new ActionForward();
                        forward.setPath(mapping.findForward(forwardName).getPath()+initialParameters);
                        forward.setRedirect(true);
                        
                        return forward;
                    }
                    case WebConstants.SMS_PACKAGE_1000:
                    {
                        InfoTrace.getInstance().printInfo(DebugLevel.INFO, "This is 1000 sms packages payment.");
                        LogTools.getInstance().insertLog(DebugLevel.INFO, "This is 1000 sms packages payment.");
                                                
                        forwardName = WebConstants.SMS_PACKAGE_1000_NAME;
                        
                        ActionForward forward = new ActionForward();
                        forward.setPath(mapping.findForward(forwardName).getPath()+initialParameters);
                        forward.setRedirect(true);
                        
                        return forward;
                    }
                    case WebConstants.SMS_PACKAGE_5000:
                    {
                        InfoTrace.getInstance().printInfo(DebugLevel.INFO, "This is 5000 sms packages payment.");
                        LogTools.getInstance().insertLog(DebugLevel.INFO, "This is 5000 sms packages payment.");
                                                
                        forwardName = WebConstants.SMS_PACKAGE_5000_NAME;
                        
                        ActionForward forward = new ActionForward();
                        forward.setPath(mapping.findForward(forwardName).getPath()+initialParameters);
                        forward.setRedirect(true);
                        
                        return forward;
                    }
                    case WebConstants.SPECIALIST_MEMBER:
                    {
                        InfoTrace.getInstance().printInfo(DebugLevel.INFO, "This is specialist payment.");
                        LogTools.getInstance().insertLog(DebugLevel.INFO, "This is specialist payment.");
                                                
                        forwardName = WebConstants.SPECIALIST_MEMBER_NAME;
                        
                        ActionForward forward = new ActionForward();
                        forward.setPath(mapping.findForward(forwardName).getPath()+initialParameters);
                        forward.setRedirect(true);
                        
                        return forward;
                    }
                    case WebConstants.EXPERT_MEMBER:
                    {
                        InfoTrace.getInstance().printInfo(DebugLevel.INFO, "This is expert payment.");
                        LogTools.getInstance().insertLog(DebugLevel.INFO, "This is expert payment.");
                        
                        forwardName = WebConstants.EXPERT_MEMBER_NAME;
                        
                        ActionForward forward = new ActionForward();
                        forward.setPath(mapping.findForward(forwardName).getPath()+initialParameters);
                        forward.setRedirect(true);
                        
                        return forward;
                    }
                    case WebConstants.MASTER_MEMBER:
                    {
                        InfoTrace.getInstance().printInfo(DebugLevel.INFO, "This is master payment.");
                        LogTools.getInstance().insertLog(DebugLevel.INFO, "This is master payment.");
                        
                        forwardName = WebConstants.MASTER_MEMBER_NAME;

                        ActionForward forward = new ActionForward();
                        forward.setPath(mapping.findForward(forwardName).getPath()+initialParameters);
                        forward.setRedirect(true);
                        
                        return forward;
                    }
                    default:
                    {
                        HttpSession session = (HttpSession) request.getSession();
                        if(session.getAttribute(WebConstants.USER_KEY) != null)
                        {
                            UserBean oOldUserBean = (UserBean)session.getAttribute(WebConstants.USER_KEY);
                            
                            //user had logged in already, so, just jump to Charts page
                            forwardName = WebConstants.FORWARD_SUCCESS;
                            
                            //load user info from DB to keep session info is the newest
                            UserBean oNewestUserBean = new LoginController().getUserBeanByName(oOldUserBean.getLogin_name());
                            session.setAttribute(WebConstants.USER_KEY, oNewestUserBean);
                            
                            //get necessary data
                            prepareToForwardChart(request, oNewestUserBean);
                        }
                        else
                        {
                            forwardName = "login";   
                            
                            ActionMessages errors = new ActionMessages();
                            errors.add("prompt_info", new ActionMessage("payment.result.success"));
                            saveErrors(request, errors);
                        }
                        
                        break;
                    }
                }
            }
            else
            {
                InfoTrace.getInstance().printInfo(DebugLevel.INFO, "Paypal callback for transaction ID: ' "+tx+" ' Failed!");
                LogTools.getInstance().insertLog(DebugLevel.INFO, "Paypal callback for transaction ID: ' "+tx+" ' Failed!");
                
                forwardName = WebConstants.FORWARD_FAILED;
                
                ActionMessages errors = new ActionMessages();
                errors.add("error", new ActionMessage("payment.result.error"));
                saveErrors(request, errors);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            
            LogTools.getInstance().insertLog(DebugLevel.ERROR,CommonTools.getExceptionDescribe(e));
        }
        
        return mapping.findForward(forwardName);
    }
    
    private void prepareToForwardChart(HttpServletRequest request, UserBean oNewestUserBean)
    {
        AccountController accountController = new AccountController();
        
        //get all quick links
        List<QuickLinkBean> oQuickLinks = accountController.getAllQuickLinks(oNewestUserBean);
        Comparator<QuickLinkBean> comp = new QuickLinkComparator();
        Collections.sort(oQuickLinks,comp);
        request.setAttribute(WebConstants.USER_QUICK_LINKS, oQuickLinks);
        
        //get current sms credits
        long currentSmsCredits = accountController.getUserSmsCredits(oNewestUserBean);
        request.setAttribute(WebConstants.MY_SMS_CREDITS, Long.valueOf(currentSmsCredits));
        
        //get current membership
        ProductBean productBean = accountController.getMyMembership(oNewestUserBean);
        request.setAttribute(WebConstants.MY_MEMBER_SHIP, productBean);
        
        //get all active markets of current user
        List<MarketTypeBean> oActiveMarketList = accountController.getAllActiveMarkets(oNewestUserBean);
        Comparator<MarketTypeBean> compForMarket = new MarketTypeBeanComparator();
        Collections.sort(oActiveMarketList,compForMarket);
        request.setAttribute(WebConstants.USER_ACTIVE_MARKETS, oActiveMarketList);
        
        //get all My Market preference of current user
        HashMap<Long, UserSignalPreferenceBaseBean> allMyActiveSignalMap = new HashMap<Long, UserSignalPreferenceBaseBean>();
        List<UserSignalPreferenceBaseBean> oAllMySignalPrferenceBean = accountController.getUserSignalPreferenceBaseBean(oNewestUserBean,false);
        for(int i=0; i<oAllMySignalPrferenceBean.size(); i++)
        {
            allMyActiveSignalMap.put(Long.valueOf(oAllMySignalPrferenceBean.get(i).getMarket_type_id()), oAllMySignalPrferenceBean.get(i));
        }                
        request.setAttribute(WebConstants.ALL_MY_ACTIVE_SIGNAL_MAP, allMyActiveSignalMap);
        
        //get all current markets
        request.setAttribute(WebConstants.ALL_CURRENT_MARKETS, DataCache.getInstance().getAllMarketType());
        
        List<MarketPeriodBean> allTimeFrames = DataCache.getInstance().getAllMarketPeriod();
        request.setAttribute(WebConstants.ALL_MARTKET_PERIOD, allTimeFrames);
        
        Map<Long, List<StrategyBean>> marketStrategy = accountController.getMarketStrategyMap();
        request.setAttribute(WebConstants.MARKET_STRATEGY_MAP, marketStrategy);
        
        Map<Long, List<MarketPeriodBean>> strategyTimeframe = accountController.getStrategyTimeframeMap();
        request.setAttribute(WebConstants.STRATEGY_TIMEFRAME_MAP, strategyTimeframe);
    }
}
