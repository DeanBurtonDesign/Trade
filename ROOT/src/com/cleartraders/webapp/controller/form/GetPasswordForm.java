/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webapp.controller.form;

import javax.servlet.http.HttpServletRequest;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;

import com.cleartraders.common.util.tools.CommonTools;

/** 
 * MyEclipse Struts
 * Creation date: 03-14-2009
 * 
 * XDoclet definition:
 * @struts.form name="getPasswordForm"
 */
public class GetPasswordForm extends ActionForm
{
    /*
     * Generated Methods
     */

    /**
     * 
     */
    private static final long serialVersionUID = -9100974322695736776L;
    private String email_address="";
    private String security_code="";
    private String password="";
    private String confirmpassword="";

    public String getConfirmpassword()
    {
        return confirmpassword;
    }

    public void setConfirmpassword(String confirmpassword)
    {
        this.confirmpassword = confirmpassword;
    }

    public String getPassword()
    {
        return password;
    }

    public void setPassword(String password)
    {
        this.password = password;
    }

    public String getSecurity_code()
    {
        return security_code;
    }

    public void setSecurity_code(String security_code)
    {
        this.security_code = security_code;
    }

    public String getEmail_address()
    {
        return email_address;
    }

    public void setEmail_address(String email_address)
    {
        this.email_address = email_address;
    }

    /** 
     * Method validate
     * @param mapping
     * @param request
     * @return ActionErrors
     */
    public ActionErrors validate(ActionMapping mapping,
            HttpServletRequest request)
    {
        ActionErrors errors = new ActionErrors();
        
        if(this.email_address == null || this.email_address.trim().length() == 0)
        {
            errors.add("email", new ActionMessage("get.password.no.email.error"));
        }
        else if(this.email_address.trim().length() > 100)
        {
            errors.add("email", new ActionMessage("get.password.email.too.long.error"));
        }
        else
        {
            this.email_address = CommonTools.filteDangerString(email_address);
            
            if(!CommonTools.isEMailValid(email_address))
            {
                errors.add("email", new ActionMessage("get.password.email.format.error"));
            }
        }
        
        if(this.security_code == null || this.security_code.trim().length() == 0)
        {
            errors.add("securitycode", new ActionMessage("get.password.no.securitycode.error"));
        }
        else if(this.security_code.trim().length() > 100)
        {
            errors.add("securitycode", new ActionMessage("get.password.securitycode.too.long.error"));
        }
        else
        {
            this.security_code = CommonTools.filteDangerString(security_code);
        }
        
        if(this.password == null || this.password.trim().length() == 0)
        {
            errors.add("password", new ActionMessage("get.password.no.password.error"));
        }
        else if(this.password.trim().length() > 100)
        {
            errors.add("password", new ActionMessage("get.password.password.too.long.error"));
        }
        else
        {
            this.password = CommonTools.filteDangerString(password);
        }
        
        if(this.confirmpassword == null || this.confirmpassword.trim().length() == 0)
        {
            errors.add("confirmpassword", new ActionMessage("get.password.no.confirmpassword.error"));
        }
        else if(this.confirmpassword.trim().length() > 100)
        {
            errors.add("confirmpassword", new ActionMessage("get.password.confirmpassword.too.long.error"));
        }
        else
        {
            this.confirmpassword = CommonTools.filteDangerString(confirmpassword);
            
            if(!confirmpassword.equals(password))
            {
                errors.add("confirmpassword", new ActionMessage("get.password.not.as.same.as.confirmpassword"));
            }
        }
        
        return errors;
    }

    /** 
     * Method reset
     * @param mapping
     * @param request
     */
    public void reset(ActionMapping mapping, HttpServletRequest request)
    {
        // TODO Auto-generated method stub
    }
}
