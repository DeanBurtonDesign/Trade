/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webadmin.controller.action;

import java.io.IOException;
import java.text.ParseException;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.cleartraders.common.entity.StrategyBean;
import com.cleartraders.common.entity.UserBean;
import com.cleartraders.common.entity.UserBeanAToZComparator;
import com.cleartraders.common.util.log.DebugLevel;
import com.cleartraders.common.util.log.LogTools;
import com.cleartraders.common.util.tools.CommonTools;
import com.cleartraders.webadmin.AdminConstants;
import com.cleartraders.webadmin.controller.form.MemberDetailsForm;
import com.cleartraders.webadmin.model.member.MemberController;

/** 
 * MyEclipse Struts
 * Creation date: 03-05-2009
 * 
 * XDoclet definition:
 * @struts.action path="/updateMemberDetails" name="updateMemberDetailsForm" input="/members/members.jsp" scope="request" validate="true"
 */
public class AddOrUpdateMemberDetailsAction extends BaseAction
{
    protected ActionForward executeAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
    {
        String forwardName = AdminConstants.FORWARD_FAILED;
        ActionMessages errors = new ActionMessages();
        MemberController memberController = new MemberController();
        
        try
        {                  
            MemberDetailsForm updateMemberDetailsForm = (MemberDetailsForm) form;
            
            //for log info
            UserBean currentAdmin = (UserBean)request.getSession().getAttribute(AdminConstants.USER_KEY);
            LogTools.getInstance().insertLog(DebugLevel.INFO,"Request AddOrUpdateMemberDetailsAction from Account:"+currentAdmin.getLogin_name()+
                    ", Target user account:"+updateMemberDetailsForm.getMember_email()+", Operation Type:"+updateMemberDetailsForm.getOperation_type());
            
            UserBean userInfo = extractUserInfo(updateMemberDetailsForm);
            if(null == userInfo)
            {
                errors.add("error", new ActionMessage("member.add.or.update.request.data.error"));                
                saveErrors(request, errors);                
                return new ActionForward(mapping.getInput());
            }
            
            int operationType = Integer.parseInt(updateMemberDetailsForm.getOperation_type());
            String marketIDList = updateMemberDetailsForm.getMember_subscription_markets();
            
            if(operationType == AdminConstants.ADD_OPERATION_TYPE)
            {                
                userInfo.setPwd(updateMemberDetailsForm.getMember_password());
                
                if(memberController.addMember(userInfo, marketIDList))
                {
                    forwardName = AdminConstants.FORWARD_SUCCESS;
                    
                    LogTools.getInstance().insertLog(DebugLevel.INFO,"Add new member"+updateMemberDetailsForm.getMember_email()+" successfully!");
                }
                else
                {
                    errors.add("error", new ActionMessage("member.add.failed"));                
                    saveErrors(request, errors);
                    
                    LogTools.getInstance().insertLog(DebugLevel.ERROR,"Add new member"+updateMemberDetailsForm.getMember_email()+" failed!");
                }
            }
            else if(operationType == AdminConstants.UPDATE_OPERATION_TYPE)
            {
                if(memberController.updateMember(userInfo, marketIDList))
                {
                    forwardName = AdminConstants.FORWARD_SUCCESS;
                    
                    LogTools.getInstance().insertLog(DebugLevel.INFO,"Update member"+updateMemberDetailsForm.getMember_email()+" successfully!");
                }
                else
                {
                    errors.add("error", new ActionMessage("member.update.failed"));                
                    saveErrors(request, errors);
                    
                    LogTools.getInstance().insertLog(DebugLevel.ERROR,"Update member"+updateMemberDetailsForm.getMember_email()+" failed!");
                }
            }
            else
            {
                errors.add("error", new ActionMessage("member.add.or.update.request.data.error"));                
                saveErrors(request, errors);    
                
                LogTools.getInstance().insertLog(DebugLevel.ERROR,"Add or Update member, but operation type is wrong!");
            }
        }
        catch(ParseException parseExp)
        {
            parseExp.printStackTrace();
            LogTools.getInstance().insertLog(DebugLevel.ERROR,"Exception happened in AddOrUpdateMemberDetailsAction! Exception details=> "+ CommonTools.getExceptionDescribe(parseExp));
                        
            errors.add("signupdate", new ActionMessage("member.signupdate.format.error"));            
            saveErrors(request, errors);            
        }
        catch(Exception e)
        {
            e.printStackTrace();
            LogTools.getInstance().insertLog(DebugLevel.ERROR,"Exception happened in AddOrUpdateMemberDetailsAction! Exception details=> "+ CommonTools.getExceptionDescribe(e));
            
            errors.add("error", new ActionMessage("member.add.or.update.request.data.error"));            
            saveErrors(request, errors);
        }
        finally
        {        
            List<UserBean> searchResult = memberController.getAllMembers();            
            Comparator<UserBean> comp = new UserBeanAToZComparator();
            Collections.sort(searchResult,comp);            
            request.setAttribute(AdminConstants.MEMBER_LIST, searchResult);
            
            Map<Long, List<StrategyBean>> marketStrategy = new MemberController().getMarketStrategyMap();
            request.setAttribute(AdminConstants.MARKET_STRATEGY_MAP, marketStrategy);
        }
        
        return mapping.findForward(forwardName);
    }
    
    private UserBean extractUserInfo(MemberDetailsForm updateMemberDetailsForm) throws ParseException
    {
        UserBean userInfo = new UserBean();
        
        userInfo.setId(Long.parseLong(updateMemberDetailsForm.getMember_id()));
        userInfo.setMemberType(Long.parseLong(updateMemberDetailsForm.getMember_type_value()));
        userInfo.setMemberLevel(Long.parseLong(updateMemberDetailsForm.getMember_plan()));
        userInfo.setEmail(updateMemberDetailsForm.getMember_email());
        userInfo.setLogin_name(updateMemberDetailsForm.getMember_email());
        userInfo.setFirst_name(updateMemberDetailsForm.getMember_first_name());
        userInfo.setLast_name(updateMemberDetailsForm.getMember_last_name());
        userInfo.setMobile(updateMemberDetailsForm.getMember_mobile());
        userInfo.setCountry_id(Long.parseLong(updateMemberDetailsForm.getMember_country()));
        userInfo.setTime_zone_id(Long.parseLong(updateMemberDetailsForm.getMember_timezone()));
        userInfo.setReg_date(updateMemberDetailsForm.getMember_signup_date());
        userInfo.setExpired_date(updateMemberDetailsForm.getMember_expired_date());
        userInfo.setStatus(Integer.parseInt(updateMemberDetailsForm.getMember_billing_status()));
        userInfo.setSms_credits(Long.parseLong(updateMemberDetailsForm.getMember_sms_credits()));
        
        return userInfo;
    }
}
