/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webadmin.controller.action;

import java.io.IOException;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.cleartraders.common.entity.UserBean;
import com.cleartraders.common.entity.UserBeanAToZComparator;
import com.cleartraders.common.util.log.DebugLevel;
import com.cleartraders.common.util.log.LogTools;
import com.cleartraders.common.util.tools.CommonTools;
import com.cleartraders.webadmin.AdminConstants;
import com.cleartraders.webadmin.controller.form.ResetMemberPWDForm;
import com.cleartraders.webadmin.model.member.MemberController;

/** 
 * MyEclipse Struts
 * Creation date: 03-13-2009
 * 
 * XDoclet definition:
 * @struts.action path="/resetMemberPWD" name="resetMemberPWDForm" input="/members/members.jsp" scope="request" validate="true"
 */
public class ResetMemberPWDAction extends BaseAction
{
    @Override
    protected ActionForward executeAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
    {
        String forwardName = AdminConstants.FORWARD_FAILED;
        ActionMessages errors = new ActionMessages();
        MemberController memberController = new MemberController();
        
        try
        {
            ResetMemberPWDForm resetMemberPWDForm = (ResetMemberPWDForm) form;
            
            //for log info
            UserBean currentAdmin = (UserBean)request.getSession().getAttribute(AdminConstants.USER_KEY);
            LogTools.getInstance().insertLog(DebugLevel.INFO,"Request ResetMemberPWDAction from Account:"+currentAdmin.getLogin_name()+
                    ", target user id:"+resetMemberPWDForm.getReset_pwd_member_id());
        
            long memberID = Long.parseLong(resetMemberPWDForm.getReset_pwd_member_id());
            if(memberController.resetMemberPWD(memberID, resetMemberPWDForm.getReset_new_pwd()))
            {
                forwardName = AdminConstants.FORWARD_SUCCESS;
                
                errors.add("prompt_info", new ActionMessage("member.reset.pwd.success"));            
                saveErrors(request, errors);
                
                LogTools.getInstance().insertLog(DebugLevel.INFO,"Reset password successfully!");
            }
            else
            {
                errors.add("error", new ActionMessage("member.reset.pwd.request.data.error"));            
                saveErrors(request, errors);
                
                LogTools.getInstance().insertLog(DebugLevel.ERROR,"Failed to reset password!");
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            
            LogTools.getInstance().insertLog(DebugLevel.ERROR,CommonTools.getExceptionDescribe(e));            
            
            errors.add("error", new ActionMessage("member.reset.pwd.request.data.error"));            
            saveErrors(request, errors);
        }
        finally
        {
            List<UserBean> searchResult = memberController.getAllMembers();            
            Comparator<UserBean> comp = new UserBeanAToZComparator();
            Collections.sort(searchResult,comp);            
            request.setAttribute(AdminConstants.MEMBER_LIST, searchResult);
        }
        
        return mapping.findForward(forwardName);
    }
}
