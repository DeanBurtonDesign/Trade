/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webadmin.controller.action;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.cleartraders.common.entity.StrategyBean;
import com.cleartraders.common.entity.UserBean;
import com.cleartraders.common.entity.UserBeanAToZComparator;
import com.cleartraders.common.util.log.DebugLevel;
import com.cleartraders.common.util.log.LogTools;
import com.cleartraders.common.util.tools.CommonTools;
import com.cleartraders.webadmin.AdminConstants;
import com.cleartraders.webadmin.controller.form.AdminLoginForm;
import com.cleartraders.webadmin.model.login.AdminLoginController;
import com.cleartraders.webadmin.model.member.MemberController;

/** 
 * MyEclipse Struts
 * Creation date: 02-25-2009
 * 
 * XDoclet definition:
 * @struts.action path="/adminLogin" name="adminLoginForm" input="/login/adminLogin.jsp" scope="request" validate="true"
 */
public class AdminLoginAction extends Action
{
    /*
     * Generated Methods
     */

    /** 
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
    {
        AdminLoginForm adminLoginForm = (AdminLoginForm) form;
        
        HttpSession session = (HttpSession) request.getSession();
        
        String forwardName = AdminConstants.FORWARD_FAILED;
        
        try
        {
            AdminLoginController loginController = new AdminLoginController();     
            
            //check user exist or not
            if(!loginController.userExist(adminLoginForm.getUsername()))
            {
                forwardName=AdminConstants.FORWARD_FAILED;
                
                ActionMessages errors = new ActionMessages();
                errors.add("username", new ActionMessage("login.user.not.exist.error"));
                
                saveErrors(request, errors);
                
                LogTools.getInstance().insertLog(DebugLevel.ERROR,"Request AdminLoginAction from Account:"+adminLoginForm.getUsername()+
                        ",This account is not exist. Requested IP address is from "+request.getRemoteAddr());                
                                    
                return new ActionForward(mapping.getInput());
            }
            
            //check admin is enabled
            if(!loginController.userWasEnabled(adminLoginForm.getUsername()))
            {
                forwardName=AdminConstants.FORWARD_FAILED;
                
                ActionMessages errors = new ActionMessages();
                errors.add("username", new ActionMessage("login.user.not.verified.error"));
                
                saveErrors(request, errors);
                
                LogTools.getInstance().insertLog(DebugLevel.ERROR,"Request AdminLoginAction from Account:"+adminLoginForm.getUsername()+
                        ",This account is not enabled. Requested IP address is from "+request.getRemoteAddr());  
                
                return new ActionForward(mapping.getInput());
            }
            
            //check user is Admin
            if(!loginController.userIsAdmin(adminLoginForm.getUsername()))
            {
                forwardName=AdminConstants.FORWARD_FAILED;
                
                ActionMessages errors = new ActionMessages();
                errors.add("username", new ActionMessage("login.user.not.exist.error"));
                
                saveErrors(request, errors);
                
                LogTools.getInstance().insertLog(DebugLevel.ERROR,"Request AdminLoginAction from Account:"+adminLoginForm.getUsername()+
                        ",This account is not Administrator. Requested IP address is from "+request.getRemoteAddr());
                                    
                return new ActionForward(mapping.getInput());
            }
            
            //check user is NOT expired
            if(!loginController.userIsNotExpired(adminLoginForm.getUsername()))
            {
                forwardName=AdminConstants.FORWARD_FAILED;
                
                ActionMessages errors = new ActionMessages();
                errors.add("username", new ActionMessage("login.user.expired.error"));
                
                saveErrors(request, errors);
                
                LogTools.getInstance().insertLog(DebugLevel.ERROR,"Request AdminLoginAction from Account:"+adminLoginForm.getUsername()+
                        ",This account is expired. Requested IP address is from "+request.getRemoteAddr());
                                    
                return new ActionForward(mapping.getInput());
            }
            
            //check username and password
            if(loginController.loginCheck(adminLoginForm.getUsername(),adminLoginForm.getPassword()))
            {
                UserBean oUserBean = loginController.getUserBeanByName(adminLoginForm.getUsername());
                
                //update last login
                long lastLogin = System.currentTimeMillis();
                oUserBean.setLast_login(lastLogin);
                loginController.updateUserLastLogin(oUserBean, lastLogin);
                
                //add into session
                session.setAttribute(AdminConstants.USER_KEY, oUserBean);
                
                MemberController oMemberController = new MemberController();
                
                //get all standard member 
                List<UserBean> allStandardMemberList = oMemberController.getAllMembers();
                Comparator<UserBean> comp = new UserBeanAToZComparator();
                Collections.sort(allStandardMemberList,comp);
                
                session.setAttribute(AdminConstants.MEMBER_LIST, allStandardMemberList);
                
                Map<Long, List<StrategyBean>> marketStrategy = oMemberController.getMarketStrategyMap();
                request.setAttribute(AdminConstants.MARKET_STRATEGY_MAP, marketStrategy);
                
                forwardName = AdminConstants.FORWARD_SUCCESS;
                
                LogTools.getInstance().insertLog(DebugLevel.INFO,"Request AdminLoginAction from Account:"+adminLoginForm.getUsername()+
                        ", User name and password are both right. Requested IP address is from "+request.getRemoteAddr());
            }
            else
            {
                forwardName=AdminConstants.FORWARD_FAILED;
                
                ActionMessages errors = new ActionMessages();
                errors.add("username", new ActionMessage("login.username.password.error"));
                
                saveErrors(request, errors);
                
                LogTools.getInstance().insertLog(DebugLevel.ERROR,"Request AdminLoginAction from Account:"+adminLoginForm.getUsername()+
                        ", but the Password is wrong. Requested IP address is from "+request.getRemoteAddr());
                                    
                return new ActionForward(mapping.getInput());
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            
            LogTools.getInstance().insertLog(DebugLevel.ERROR,"Exception happened in AdminLoginAction! Exception details=> "+ CommonTools.getExceptionDescribe(e));
        }
        
        return mapping.findForward(forwardName);
    }
}
