/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webadmin.controller.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.cleartraders.common.entity.StrategyBean;
import com.cleartraders.common.entity.UserBean;
import com.cleartraders.common.entity.UserBeanAToZComparator;
import com.cleartraders.common.entity.UserBeanSMSComparator;
import com.cleartraders.common.entity.UserBeanSignupNewestComparator;
import com.cleartraders.common.entity.UserBeanSignupOldestComparator;
import com.cleartraders.common.entity.UserBeanZToAComparator;
import com.cleartraders.webadmin.AdminConstants;
import com.cleartraders.webadmin.controller.form.SortMemberForm;
import com.cleartraders.webadmin.model.member.MemberController;

/** 
 * MyEclipse Struts
 * Creation date: 03-07-2009
 * 
 * XDoclet definition:
 * @struts.action path="/sortMember" name="sortMemberForm" input="/members/members.jsp" scope="request" validate="true"
 */
public class SortMemberAction extends BaseAction
{
    @Override
    protected ActionForward executeAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
    {
        SortMemberForm sortMemberForm = (SortMemberForm) form;
        String forwardName = AdminConstants.FORWARD_SUCCESS;
        
        List<UserBean> searchResult = new ArrayList<UserBean>();
        
        if(AdminConstants.SORT_REGISTERED_MEMBER == Integer.parseInt(sortMemberForm.getMember_sort_type()))
        {
            searchResult = new MemberController().getAllRegisteredMember();
            
            Comparator<UserBean> comp = new UserBeanAToZComparator();
            Collections.sort(searchResult,comp);
        }
        else if(AdminConstants.SORT_UNREGISTERED_MEMBER == Integer.parseInt(sortMemberForm.getMember_sort_type()))
        {
            searchResult = new MemberController().getAllUnregisteredMember();
            
            Comparator<UserBean> comp = new UserBeanAToZComparator();
            Collections.sort(searchResult,comp);
        }
        else
        {
            searchResult = new MemberController().getAllMembers();
            
            if(AdminConstants.SORT_MEMBER_A_TO_Z == Integer.parseInt(sortMemberForm.getMember_sort_type()))
            {
                Comparator<UserBean> comp = new UserBeanAToZComparator();
                Collections.sort(searchResult,comp);
            }
            else if(AdminConstants.SORT_MEMBER_Z_TO_A == Integer.parseInt(sortMemberForm.getMember_sort_type()))
            {
                Comparator<UserBean> comp = new UserBeanZToAComparator();
                Collections.sort(searchResult,comp);
            }
            else if(AdminConstants.SORT_MEMBER_SIGNUP_NEWEST == Integer.parseInt(sortMemberForm.getMember_sort_type()))
            {
                Comparator<UserBean> comp = new UserBeanSignupNewestComparator();
                Collections.sort(searchResult,comp);
            }
            else if(AdminConstants.SORT_MEMBER_SIGNUP_OLDEST == Integer.parseInt(sortMemberForm.getMember_sort_type()))
            {
                Comparator<UserBean> comp = new UserBeanSignupOldestComparator();
                Collections.sort(searchResult,comp);
            }
            else if(AdminConstants.SORT_MEMBER_CANCELLED == Integer.parseInt(sortMemberForm.getMember_sort_type()))
            {
                searchResult.clear();
                searchResult = new MemberController().getAllCancelledMembers();
                
                Comparator<UserBean> comp = new UserBeanAToZComparator();
                Collections.sort(searchResult,comp);
            }
            else if(AdminConstants.SORT_MEMBER_PRODUCT_PLAN == Integer.parseInt(sortMemberForm.getMember_sort_type()))
            {
    //            Comparator<UserBean> comp = new UserBeanMemberProductPlanComparator();
    //            Collections.sort(searchResult,comp);
            }
            else if(AdminConstants.SORT_MEMBER_SMS == Integer.parseInt(sortMemberForm.getMember_sort_type()))
            {
                Comparator<UserBean> comp = new UserBeanSMSComparator();
                Collections.sort(searchResult,comp);
            }
        }
        
        request.setAttribute(AdminConstants.MEMBER_LIST, searchResult);
        request.setAttribute(AdminConstants.MEMBER_SORT_TYPE, sortMemberForm.getMember_sort_type());
        Map<Long, List<StrategyBean>> marketStrategy = new MemberController().getMarketStrategyMap();
        request.setAttribute(AdminConstants.MARKET_STRATEGY_MAP, marketStrategy);
        
        return mapping.findForward(forwardName);
    }
}
