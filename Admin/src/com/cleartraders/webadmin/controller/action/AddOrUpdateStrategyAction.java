/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cleartraders.webadmin.controller.action;

import java.io.IOException;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.cleartraders.common.entity.StrategyBean;
import com.cleartraders.common.entity.StrategyComparator;
import com.cleartraders.common.entity.UserBean;
import com.cleartraders.common.util.log.DebugLevel;
import com.cleartraders.common.util.log.LogTools;
import com.cleartraders.common.util.tools.CommonTools;
import com.cleartraders.webadmin.AdminConstants;
import com.cleartraders.webadmin.controller.form.StrategyForm;
import com.cleartraders.webadmin.model.strategy.StrategyController;

/** 
 * MyEclipse Struts
 * Creation date: 05-04-2009
 * 
 * XDoclet definition:
 * @struts.action path="/strategies/addOrUpdateStrategy" name="addOrUpdateStrategyForm" input="/strategies/strategy.jsp" scope="request" validate="true"
 */
public class AddOrUpdateStrategyAction extends BaseAction
{
    protected ActionForward executeAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
    {
        String forwardName = AdminConstants.FORWARD_FAILED;
        ActionMessages errors = new ActionMessages();
        StrategyController strategyController = new StrategyController();
        
        try
        {
            StrategyForm strategyForm = (StrategyForm)form;
            
            //for log info
            UserBean currentAdmin = (UserBean)request.getSession().getAttribute(AdminConstants.USER_KEY);
            LogTools.getInstance().insertLog(DebugLevel.INFO,"Request AddOrUpdateMemberDetailsAction from Account:"+currentAdmin.getLogin_name()+
                    ", Strategy is :"+strategyForm.getSystem_name()+", Operation Type:"+strategyForm.getOperation_type());
            
            StrategyBean strategyBean = extractStrategyInfo(strategyForm);
            if(null == strategyBean)
            {
                errors.add("error", new ActionMessage("strategy.add.or.update.request.data.error"));                
                saveErrors(request, errors);             
                
                return new ActionForward(mapping.getInput());
            }
            
            int operationType = Integer.parseInt(strategyForm.getOperation_type());
            
            if(operationType == AdminConstants.ADD_OPERATION_TYPE)
            { 
                if(strategyController.addStrategy(strategyBean))
                {
                    forwardName = AdminConstants.FORWARD_SUCCESS;
                    
                    LogTools.getInstance().insertLog(DebugLevel.INFO,"Add new strategy"+strategyBean.getSystem_name()+" successfully!");
                }
                else
                {
                    errors.add("error", new ActionMessage("strategy.add.failed"));                
                    saveErrors(request, errors);
                    
                    LogTools.getInstance().insertLog(DebugLevel.ERROR,"Add new member"+strategyBean.getSystem_name()+" failed!");
                }
            }
            else if(operationType == AdminConstants.UPDATE_OPERATION_TYPE)
            {
                if(strategyController.updateStrategy(strategyBean))
                {
                    forwardName = AdminConstants.FORWARD_SUCCESS;
                    
                    LogTools.getInstance().insertLog(DebugLevel.INFO,"Update strategy"+strategyBean.getSystem_name()+" successfully!");
                }
                else
                {
                    errors.add("error", new ActionMessage("strategy.update.failed"));                
                    saveErrors(request, errors);
                    
                    LogTools.getInstance().insertLog(DebugLevel.ERROR,"Update strategy"+strategyBean.getSystem_name()+" failed!");
                }
            }
            else
            {
                errors.add("error", new ActionMessage("strategy.add.or.update.request.data.error"));                
                saveErrors(request, errors);    
                
                LogTools.getInstance().insertLog(DebugLevel.ERROR,"Add or Update strategy, but operation type is wrong!");
            }
        }
        catch(Exception exp)
        {
            exp.printStackTrace();
            LogTools.getInstance().insertLog(DebugLevel.ERROR,"Exception happened in AddOrUpdateStrategyAction! Exception details=> "+ CommonTools.getExceptionDescribe(exp));
            
            errors.add("error", new ActionMessage("strategy.add.or.update.request.data.error"));            
            saveErrors(request, errors);
        }
        finally
        {        
            List<StrategyBean> allStrategy = strategyController.getAllStrategyBaseInfo();         
            
            Comparator<StrategyBean> comp = new StrategyComparator();
            Collections.sort(allStrategy,comp);    
            
            request.setAttribute(AdminConstants.STRATEGY_LIST, allStrategy);
        }
        
        return mapping.findForward(forwardName);
    }
    
    private StrategyBean extractStrategyInfo(StrategyForm strategyForm)
    {
        StrategyBean strategyBean = new StrategyBean();
        
        strategyBean.setId(Long.parseLong(strategyForm.getStrategy_id()));
        strategyBean.setActive(Integer.parseInt(strategyForm.getStrategy_status()));
        strategyBean.setCommon_name(strategyForm.getCommon_name());
        strategyBean.setSystem_name(strategyForm.getSystem_name());
        strategyBean.setDescription(strategyForm.getDescription_content());
        strategyBean.setLink_url(strategyForm.getLink_url());
        strategyBean.setRelated_markets(strategyForm.getAll_related_markets());
        strategyBean.setRelated_product_plans(strategyForm.getAll_related_product_plans());
        strategyBean.setRelated_timeframes(strategyForm.getAll_related_timeframe());
        
        return strategyBean;
    }
}
